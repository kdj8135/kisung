{"version":3,"file":"SliderUtil.js","sources":["SliderUtil.js"],"sourcesContent":["const calculateFixedTrackSize = ({ max, min, smallStep, fixedTickWidth }) =>\n    ((max - min) / smallStep) * fixedTickWidth;\n\nconst calculateTrackSize = (wrapperWidth, offset, showButtons = true) => {\n    const BUTTONS_COUNT = 2;\n    const trackOffset = showButtons ? parseFloat(offset, 10) * BUTTONS_COUNT : 0;\n    const trackWidth = wrapperWidth - trackOffset;\n\n    return trackWidth;\n};\n\nconst calculateTicksCount = (max = 0, min = 0, smallStep = 1) =>\n    calculateAreasCount(max, min, smallStep) + 1;\n\nconst calculateAreasCount = (max = 0, min = 0, smallStep = 1) => {\n    if (smallStep <= 0 ) {\n        throw new Error(\"Invalid argument: smallStep must be a positive number\");\n    }\n\n    return Math.floor(Math.abs(min - max) / smallStep);\n};\n\nconst calculateValueFromTick = (index, { max, min, smallStep, reverse, vertical }) => {\n    const value = min + (index * smallStep);\n\n    return vertical || reverse ? Math.abs(value - max) : value;\n};\n\nconst calculateValueFromTrack = (clientRect, pageOffset, props) => {\n    let length, wrapperOffset;\n\n    if (props.vertical) {\n        const { top, bottom } = clientRect;\n        length = top - bottom;\n        wrapperOffset = pageOffset.pageY - bottom;\n    } else {\n        const { left, right } = clientRect;\n        length = right - left;\n        wrapperOffset = pageOffset.pageX - left;\n    }\n\n    return valueFromTrack(props, wrapperOffset, length);\n};\n\nconst valueFromTrack = (props, wrapperOffset, length) => {\n    const { max, min, reverse, smallStep } = props;\n    const distance = max - min;\n    const clickOffset = wrapperOffset / length;\n    const maxTickValue = distance - (distance % smallStep);\n    const maxOffset = (100 / distance) * maxTickValue / 100;\n    const absValue = (wrapperOffset / length) * distance;\n    let value = max;\n\n    if (clickOffset < maxOffset) {\n        value = reverse ? max - absValue : absValue + min;\n    }\n\n    return snapValue(extendProps(props, { value }));\n};\n\nconst calculateTickSizes = (trackSize, min, max, step) => {\n    const elementCount = Math.floor((max - min) / step) + 1;\n    const distStep = trackSize / (max - min);\n    let result = [];\n    let usedSpace = 0;\n    let endPoint = 0;\n\n    for (let i = 0; i < elementCount; i++) {\n        if (i === 0 || i === elementCount - 1) {\n            endPoint += (step / 2) * distStep;\n        } else {\n            endPoint += step * distStep;\n        }\n\n        const size = Math.round(endPoint - usedSpace);\n\n        result.push(size);\n\n        usedSpace += size;\n    }\n\n    return result;\n};\n\nconst calculateHandlePosition = ({ handleWidth, trackWidth, min, max, reverse, value }) => {\n    const halfHandleWidth = Math.floor(handleWidth / 2);\n    const step = trackWidth / Math.abs(max - min);\n    let pos = step * (value - min);\n    if (reverse) {\n        pos = trackWidth - pos;\n    }\n\n    return Math.floor(pos - halfHandleWidth);\n};\n\nconst decreaseValueToStep = ({ max, min, smallStep, value }) => {\n    let result;\n    if (value % smallStep === 0) {\n        result = value - smallStep;\n    } else {\n        result = value - (value % smallStep);\n    }\n    return trimValue(max, min, result);\n};\n\nconst increaseValueToStep = ({ max, min, smallStep, value }) => {\n    const result = value - (value % smallStep) + smallStep;\n\n    return trimValue(max, min, result);\n};\n\nconst snapValue = (props) => {\n    const { smallStep, value } = props;\n    const left = decreaseValueToStep(props);\n    const right = increaseValueToStep(props);\n\n    if (value % smallStep === 0) {\n        return value;\n    }\n\n    if (right - value <= smallStep / 2) {\n        return right;\n    }\n\n    return left;\n};\n\nconst trimValue = (max, min, value) => {\n    if (value > max) {\n        return max;\n    }\n\n    if (value < min) {\n        return min;\n    }\n\n    return value;\n};\n\nconst identity = (value) => value;\n\nconst extendProps = (target, ...sources) => Object.assign({}, target, ...sources);\n\nexport default {\n    calculateFixedTrackSize,\n    calculateValueFromTick,\n    calculateValueFromTrack,\n    calculateTrackSize,\n    calculateTicksCount,\n    calculateTickSizes,\n    calculateHandlePosition,\n    decreaseValueToStep,\n    identity,\n    increaseValueToStep,\n    trimValue,\n    snapValue,\n    valueFromTrack\n};\n"],"names":["const","let"],"mappings":"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"}