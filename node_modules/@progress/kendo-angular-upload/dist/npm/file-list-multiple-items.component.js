"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var animations_1 = require("@angular/animations");
var file_info_1 = require("./file-info");
var file_list_item_base_1 = require("./file-list-item-base");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
var upload_service_1 = require("./upload.service");
/**
 * @hidden
 */
var FileListMultipleItemsComponent = /** @class */ (function (_super) {
    tslib_1.__extends(FileListMultipleItemsComponent, _super);
    function FileListMultipleItemsComponent(localization, uploadService) {
        var _this = _super.call(this, uploadService) || this;
        _this.localization = localization;
        _this.subscribeUploadProgress(function (args) {
            if (args.files[0].uid === _this.files[0].uid) {
                _this.progressComplete = args.percentComplete;
            }
        });
        return _this;
    }
    /**
     * @hidden
     */
    FileListMultipleItemsComponent.prototype.setFileNameClasses = function (file) {
        return {
            "k-file-name": true,
            "k-file-name-invalid": _super.prototype.fileHasValidationErrors.call(this, file)
        };
    };
    Object.defineProperty(FileListMultipleItemsComponent.prototype, "showProgress", {
        /**
         * @hidden
         */
        get: function () {
            return (this.files[0].state === file_info_1.FileState.Uploading) ? 'active' : 'inactive';
        },
        enumerable: true,
        configurable: true
    });
    FileListMultipleItemsComponent.prototype.ngOnInit = function () {
        this.filesHaveErrors = _super.prototype.filesHaveValidationErrors.call(this, this.files);
    };
    FileListMultipleItemsComponent.decorators = [
        { type: core_1.Component, args: [{
                    animations: [
                        animations_1.trigger('progressState', [
                            animations_1.state('active', animations_1.style({ opacity: 1 })),
                            animations_1.state('inactive', animations_1.style({ opacity: 0 })),
                            animations_1.transition('void => active', animations_1.style({ opacity: 0 })),
                            animations_1.transition('inactive => active', animations_1.style({ opacity: 1 })),
                            animations_1.transition('active => inactive', animations_1.animate('1s 2s ease-out'))
                        ])
                    ],
                    selector: 'kendo-upload-file-list-multiple-items',
                    template: "\n      <span class=\"k-progress\" [style.width]=\"progressComplete + '%'\" [@progressState]=\"showProgress\"></span>\n      <span *ngIf=\"!filesHaveErrors\" class=\"k-multiple-files-extension-wrapper\">\n        <span class=\"k-file-state\"></span>\n      </span>\n      <span *ngIf=\"filesHaveErrors\" class=\"k-multiple-files-invalid-extension-wrapper\">\n        <span class='k-file-invalid-icon'>!</span>\n        <span class=\"k-file-state\"></span>\n      </span>\n      <span class=\"k-file-name-size-wrapper\">\n        <span *ngFor=\"let file of files\" [ngClass]=\"setFileNameClasses(file)\" [title]=\"file.name\">{{file.name}}</span>\n        <span *ngIf=\"!filesHaveErrors\"\n              class=\"k-file-information\">Total: {{ files.length }} files, {{ getTotalFilesSizeMessage(files) }}</span>\n        <span *ngIf=\"filesHaveErrors\" class=\"k-file-validation-message\">{{ getInvalidFilesMessage() }}</span>\n      </span>\n      <kendo-upload-file-list-item-action-button\n        [file]='files[0]'\n        [disabled]='disabled'\n        [async]='async'\n        [progress]='progressComplete'>\n      </kendo-upload-file-list-item-action-button>\n    "
                },] },
    ];
    /** @nocollapse */
    FileListMultipleItemsComponent.ctorParameters = function () { return [
        { type: kendo_angular_l10n_1.LocalizationService, },
        { type: upload_service_1.UploadService, },
    ]; };
    FileListMultipleItemsComponent.propDecorators = {
        'disabled': [{ type: core_1.Input },],
        'files': [{ type: core_1.Input },],
        'async': [{ type: core_1.Input },],
    };
    return FileListMultipleItemsComponent;
}(file_list_item_base_1.FileListItemBase));
exports.FileListMultipleItemsComponent = FileListMultipleItemsComponent;
