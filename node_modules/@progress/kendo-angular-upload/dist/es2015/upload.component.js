/* tslint:disable: no-use-before-declare */
import { Component, Input, Output, EventEmitter, forwardRef, HostBinding, HostListener, Optional, Inject, ContentChild, ViewChild, ElementRef, NgZone } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { HttpHeaders } from '@angular/common/http';
import { fromEvent } from 'rxjs/observable/fromEvent';
import { filter } from 'rxjs/operators/filter';
import { merge } from 'rxjs/operators/merge';
import { UploadService } from './upload.service';
import { FileState } from './file-info';
import { FileTemplateDirective } from './templates/file-template.directive';
import { Keys, NavigationService } from './navigation.service';
import { L10N_PREFIX, LocalizationService, RTL } from '@progress/kendo-angular-l10n';
import util from "./util";
/**
 * @hidden
 */
export const UPLOAD_VALUE_ACCESSOR = {
    multi: true,
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => UploadComponent)
};
/**
 * Represents the Kendo UI Upload component for Angular.
 */
export class UploadComponent {
    constructor(uploadService, localization, navigation, _ngZone, wrapper, rtl) {
        this.uploadService = uploadService;
        this.localization = localization;
        this.navigation = navigation;
        this._ngZone = _ngZone;
        /**
         * Enables the selection of multiple files.
         * If set to `false`, only one file can be selected at a time.
         */
        this.multiple = true;
        /**
         * Disables the Upload. The default value is `false`.
         */
        this.disabled = false;
        /**
         * Toggles the visibility of the file list.
         */
        this.showFileList = true;
        /**
         * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabIndex = 0;
        /**
         * @hidden
         */
        this.id = util.guid();
        /**
         * Fires when the user navigates outside the component.
         */
        this.blur = new EventEmitter();
        /**
         * Fires when the upload is canceled while in progress.
         */
        this.cancel = new EventEmitter();
        /**
         * Fires when the file list is about to be cleared. If prevented, the files will not be cleared.
         */
        this.clear = new EventEmitter();
        /**
         * Fires when all active uploads are completed either successfully or with errors.
         */
        this.complete = new EventEmitter();
        /**
         * Fires when an `upload` or `remove` operation has failed.
         */
        this.error = new EventEmitter();
        /**
         * Fires when the component is focused.
         */
        this.focus = new EventEmitter();
        /**
         * Fires when an uploaded file is about to be removed. If prevented, the files will remain in the list.
         */
        this.remove = new EventEmitter();
        /**
         * Fires when files are selected. If prevented, the selected files will not be added to the list.
         */
        this.select = new EventEmitter();
        /**
         * Fires when an `upload` or `remove` operation is successfully completed.
         */
        this.success = new EventEmitter();
        /**
         * Fires when one or more files are about to be uploaded. If prevented, the files will neither be uploaded, nor added to the file list.
         */
        this.upload = new EventEmitter();
        /**
         * Fires when one or more files are being uploaded.
         */
        this.uploadProgress = new EventEmitter();
        /**
         * Fires when the value of the component has changed as a result of a successful `upload`, `remove` or `clear` operation.
         */
        this.valueChange = new EventEmitter();
        /**
         * @hidden
         */
        this.async = {
            autoUpload: true,
            batch: false,
            removeField: "fileNames",
            removeHeaders: new HttpHeaders(),
            removeMethod: "POST",
            removeUrl: "",
            responseType: "json",
            saveField: "files",
            saveHeaders: new HttpHeaders(),
            saveMethod: "POST",
            saveUrl: "",
            withCredentials: true
        };
        /**
         * @hidden
         */
        this._restrictions = {
            allowedExtensions: [],
            maxFileSize: 0,
            minFileSize: 0
        };
        this.onTouchedCallback = (_) => { };
        this.onChangeCallback = (_) => { };
        this.fileList = this.uploadService.files;
        this.direction = rtl ? 'rtl' : 'ltr';
        this.navigation.computeKeys(this.direction);
        this.wrapper = wrapper.nativeElement;
        this.subscribeBlur();
        this.subscribeFocus();
        this.onCancel();
        this.onChange();
        this.onClear();
        this.onComplete();
        this.onError();
        this.onRemove();
        this.onSelect();
        this.onSuccess();
        this.onUpload();
        this.onUploadProgress();
    }
    /**
     * By default, the selected files are immediately uploaded. To change this behavior, set `autoUpload` to `false`.
     */
    set autoUpload(autoUpload) { this.async.autoUpload = autoUpload; }
    get autoUpload() { return this.async.autoUpload; }
    /**
     * When enabled, all files in the selection are uploaded in one request.
     * Any files that are selected one after the other are uploaded in separate requests.
     */
    set batch(batch) { this.async.batch = batch; }
    get batch() { return this.async.batch; }
    /**
     * Configures whether credentials (cookies, headers) will be sent for cross-site requests.
     * The default values is `true`.
     * Setting `withCredentials` has no effect on same-site requests.
     * To add credentials to the request, use the `saveHeaders` or `removeHeaders` property,
     * or the [`upload`]({% slug api_upload_uploadevent %}) event.
     */
    set withCredentials(withCredentials) { this.async.withCredentials = withCredentials; }
    get withCredentials() { return this.async.withCredentials; }
    /**
     * Sets the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) key which contains the files submitted to `saveUrl`.
     * The default value is `files`.
     */
    set saveField(saveField) { this.async.saveField = saveField; }
    get saveField() { return this.async.saveField; }
    /**
     * Configures the [`HttpHeaders`](https://angular.io/api/common/http/HttpHeaders)
     * that are attached to each upload request.
     */
    set saveHeaders(saveHeaders) { this.async.saveHeaders = saveHeaders; }
    get saveHeaders() { return this.async.saveHeaders; }
    /**
     * Sets the [`RequestMethod`](https://angular.io/docs/ts/latest/api/http/index/RequestMethod-enum.html) of the upload request.
     * The default value is `POST`.
     */
    set saveMethod(saveMethod) { this.async.saveMethod = saveMethod; }
    get saveMethod() { return this.async.saveMethod; }
    /**
     * Sets the URL of the endpoint for the upload request.
     * The request [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) key is named after the `saveField` property.
     * It contains the list of files to be uploaded.
     */
    set saveUrl(saveUrl) { this.async.saveUrl = saveUrl; }
    get saveUrl() { return this.async.saveUrl; }
    /**
     * Sets the expected [`response type`](https://angular.io/api/common/http/HttpRequest#responseType) of the server.
     * It is used to parse the response appropriately.
     * The default value is `json`.
     */
    set responseType(responseType) { this.async.responseType = responseType; }
    get responseType() { return this.async.responseType; }
    /**
     * Sets the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) key
     * which contains the list of file names that are submitted to `removeUrl`.
     * The default value is `fileNames`.
     */
    set removeField(removeField) { this.async.removeField = removeField; }
    get removeField() { return this.async.removeField; }
    /**
     * Configures the [`HttpHeaders`](https://angular.io/api/common/http/HttpHeaders)
     * that are attached to each `remove` request.
     */
    set removeHeaders(removeHeaders) { this.async.removeHeaders = removeHeaders; }
    get removeHeaders() { return this.async.removeHeaders; }
    /**
     * Sets the [`RequestMethod`](https://angular.io/docs/ts/latest/api/http/index/RequestMethod-enum.html) of the `remove` request.
     * The default value is `POST`.
     */
    set removeMethod(removeMethod) { this.async.removeMethod = removeMethod; }
    get removeMethod() { return this.async.removeMethod; }
    /**
     * Sets the URL of the endpoint for the `remove` request.
     * The [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) request key is named after the `removeField` property.
     * It contains the list of file names which will be removed.
     */
    set removeUrl(removeUrl) { this.async.removeUrl = removeUrl; }
    get removeUrl() { return this.async.removeUrl; }
    /**
     * Sets the restrictions for selected files. For more information,
     * refer to the API documentation on [`FileRestrictions`]({% slug api_upload_filerestrictions %}).
     */
    set restrictions(restrictions) {
        let parsedRestrictions = Object.assign({}, this._restrictions, restrictions);
        this._restrictions = parsedRestrictions;
    }
    get restrictions() {
        return this._restrictions;
    }
    get dir() {
        return this.direction;
    }
    get hostDefaultClasses() {
        return true;
    }
    get hostDisabledClass() {
        return this.disabled;
    }
    ngOnDestroy() {
        this.fileList.clear();
        if (this.blurSubscription) {
            this.blurSubscription.unsubscribe();
        }
        if (this.wrapperFocusSubscription) {
            this.wrapperFocusSubscription.unsubscribe();
        }
        if (this.selectButtonFocusSubscription) {
            this.selectButtonFocusSubscription.unsubscribe();
        }
        if (this.cancelSubscription) {
            this.cancelSubscription.unsubscribe();
        }
        if (this.changeSubscription) {
            this.changeSubscription.unsubscribe();
        }
        if (this.clearSubscription) {
            this.clearSubscription.unsubscribe();
        }
        if (this.completeSubscription) {
            this.completeSubscription.unsubscribe();
        }
        if (this.errorSubscription) {
            this.errorSubscription.unsubscribe();
        }
        if (this.removeSubscription) {
            this.removeSubscription.unsubscribe();
        }
        if (this.selectSubscription) {
            this.selectSubscription.unsubscribe();
        }
        if (this.successSubscription) {
            this.successSubscription.unsubscribe();
        }
        if (this.successSubscription) {
            this.uploadSubscription.unsubscribe();
        }
        if (this.uploadProgressSubscription) {
            this.uploadProgressSubscription.unsubscribe();
        }
    }
    /**
     * @hidden
     */
    handleKeydown(event) {
        if (this.disabled) {
            return;
        }
        if ((event.keyCode === Keys.enter || event.keyCode === Keys.space) &&
            event.target === this.fileSelectButton.nativeElement) {
            event.preventDefault();
            this.fileSelect.nativeElement.click();
            return;
        }
        if (util.hasClasses(event.target, util.UPLOAD_CLASSES) ||
            (!util.isFocusable(event.target) && !util.hasClasses(event.target, util.IGNORE_TARGET_CLASSSES))) {
            this.navigation.process(event);
        }
    }
    /**
     * @hidden
     */
    writeValue(newValue) {
        let isValid = true;
        if (newValue instanceof Array) {
            newValue.forEach((file) => {
                if (!util.validateInitialFileInfo(file)) {
                    isValid = false;
                }
            });
            if (isValid) {
                this.uploadService.addInitialFiles(newValue);
            }
        }
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @hidden
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @hidden
     */
    setSelectButtonClasses() {
        return {
            "k-button": true,
            "k-state-focused": this.fileSelectButton.nativeElement.focused,
            "k-upload-button": true
        };
    }
    /**
     * @hidden
     */
    setSelectButtonTabIndex() {
        return this.disabled ? undefined : this.tabIndex;
    }
    /**
     * @hidden
     */
    onFileSelectButtonFocus(_event) {
        if (!this.navigation.focused) {
            this.navigation.focusedIndex = -1;
        }
    }
    /**
     * @hidden
     */
    showActionButtons() {
        const areVisible = this.fileList.filesToUpload.length > 0 && !this.async.autoUpload;
        this.navigation.actionButtonsVisible = areVisible;
        return areVisible;
    }
    /**
     * @hidden
     */
    showTotalStatus() {
        const states = [
            FileState.Uploaded,
            FileState.Uploading,
            FileState.Failed
        ];
        if (this.fileList.count === 0) {
            return false;
        }
        if (this.fileList.hasFileWithState(states)) {
            return true;
        }
        return false;
    }
    /**
     * @hidden
     */
    textFor(key) {
        return this.localization.get(key);
    }
    /**
     * Focuses the underlying input element.
     */
    focusComponent() {
        setTimeout(() => {
            this.fileSelectButton.nativeElement.focus();
        });
    }
    /**
     * Blurs the Upload if it was previously focused.
     */
    blurComponent() {
        if (this.navigation.focused) {
            this.navigation.focused = false;
            document.activeElement.blur();
            this.blur.emit();
        }
    }
    /**
     * Triggers the removal of a file or a batch of files.
     * @param uid - The `uid` of the file or a batch of files that will be removed.
     */
    removeFilesByUid(uid) {
        this.uploadService.removeFiles(uid, this.async);
    }
    /**
     * Triggers another upload attempt of an unsuccessfully uploaded file or a batch of files.
     * @param uid - The `uid` of the file or a batch of files to be retried.
     */
    retryUploadByUid(uid) {
        this.uploadService.retryFiles(uid, this.async);
    }
    /**
     * Cancels the upload of a file or a batch of files.
     * @param uid - The `uid` of the file or a batch of files that will be canceled.
     */
    cancelUploadByUid(uid) {
        this.uploadService.cancelFiles(uid);
    }
    /**
     * Uploads the currently selected files which pass the set restrictions.
     */
    uploadFiles() {
        if (this.fileList.filesToUpload.length) {
            this.uploadService.uploadFiles(this.async);
        }
    }
    subscribeBlur() {
        if (!util.isDocumentAvailable()) {
            return;
        }
        this._ngZone.runOutsideAngular(() => {
            this.documentClick = fromEvent(document, 'click').pipe(filter((event) => {
                return !(this.wrapper !== event.target && this.wrapper.contains(event.target));
            }));
            this.blurSubscription = this.documentClick
                .pipe(merge(this.navigation.onTab))
                .subscribe(() => this._ngZone.run(() => {
                if (this.navigation.focused) {
                    this.navigation.focused = false;
                    this.onTouchedCallback();
                    this.blur.emit();
                }
            }));
        });
    }
    subscribeFocus() {
        this.wrapperFocusSubscription = this.navigation.onWrapperFocus.subscribe(() => {
            this.focus.emit();
        });
        this.selectButtonFocusSubscription = this.navigation.onSelectButtonFocus.subscribe(() => {
            this.fileSelectButton.nativeElement.focus();
        });
    }
    onCancel() {
        this.cancelSubscription = this.uploadService.cancelEvent.subscribe((args) => {
            this.cancel.emit(args);
        });
    }
    onChange() {
        this.changeSubscription = this.uploadService.changeEvent.subscribe((files) => {
            this.onChangeCallback(files);
            this.valueChange.emit(files);
        });
    }
    onClear() {
        this.clearSubscription = this.uploadService.clearEvent.subscribe((args) => {
            this.clear.emit(args);
        });
    }
    onComplete() {
        this.completeSubscription = this.uploadService.completeEvent.subscribe(() => {
            this.complete.emit();
        });
    }
    onError() {
        this.errorSubscription = this.uploadService.errorEvent.subscribe((args) => {
            this.error.emit(args);
        });
    }
    onRemove() {
        this.removeSubscription = this.uploadService.removeEvent.subscribe((args) => {
            this.remove.emit(args);
        });
    }
    onSelect() {
        this.selectSubscription = this.uploadService.selectEvent.subscribe((args) => {
            this.select.emit(args);
        });
    }
    onSuccess() {
        this.successSubscription = this.uploadService.successEvent.subscribe((args) => {
            this.success.emit(args);
        });
    }
    onUpload() {
        this.uploadSubscription = this.uploadService.uploadEvent.subscribe((args) => {
            this.upload.emit(args);
        });
    }
    onUploadProgress() {
        this.uploadProgressSubscription = this.uploadService.uploadProgressEvent.subscribe((args) => {
            this.uploadProgress.emit(args);
        });
    }
}
UploadComponent.decorators = [
    { type: Component, args: [{
                exportAs: 'kendoUpload',
                providers: [
                    LocalizationService,
                    NavigationService,
                    UploadService,
                    UPLOAD_VALUE_ACCESSOR,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.upload'
                    }
                ],
                selector: 'kendo-upload',
                template: `
    <ng-container kendoUploadLocalizedMessages
      i18n-cancel="kendo.upload.cancel|The text for the Cancel button"
      cancel="Cancel"

      i18n-clearSelectedFiles="kendo.upload.clearSelectedFiles|The text for the Clear button"
      clearSelectedFiles="Clear"

      i18n-dropFilesHere="kendo.upload.dropFilesHere|The drop zone hint"
      dropFilesHere="Drop files here to upload"

      i18n-headerStatusUploaded="kendo.upload.headerStatusUploaded|The header status message after file upload completion"
      headerStatusUploaded="Done"

      i18n-headerStatusUploading="kendo.upload.headerStatusUploading|The header status message during file upload"
      headerStatusUploading="Uploading..."

      i18n-invalidFileExtension="kendo.upload.invalidFileExtension|The text for the invalid allowed extensions restriction message"
      invalidFileExtension="File type not allowed."

      i18n-invalidFiles="kendo.upload.invalidFiles|The text for the invalid files message"
      invalidFiles="Invalid file(s). Please check file upload requirements."

      i18n-invalidMaxFileSize="kendo.upload.invalidMaxFileSize|The text for the invalid max file size restriction message"
      invalidMaxFileSize="File size too large."

      i18n-invalidMinFileSize="kendo.upload.invalidMinFileSize|The text for the invalid min file size restriction message"
      invalidMinFileSize="File size too small."

      i18n-remove="kendo.upload.remove|The text for the Remove button"
      remove="Remove"

      i18n-retry="kendo.upload.retry|The text for the Retry button"
      retry="Retry"

      i18n-select="kendo.upload.select|The text for the Select button"
      select="Select files..."

      i18n-uploadSelectedFiles="kendo.upload.uploadSelectedFiles|The text for the Upload files button"
      uploadSelectedFiles="Upload"
    >
    </ng-container>
    <div kendoUploadDropzone
      [async]="async"
      [restrictions]="restrictions"
      [multiple]="multiple"
      [disabled]="disabled">
        <div role="button" #fileSelectButton
             [id]="id"
             [ngClass]='setSelectButtonClasses()'
             [attr.aria-label]="textFor('select')"
             [attr.tabIndex]="setSelectButtonTabIndex()"
             (focus)="onFileSelectButtonFocus($event)">
          <input #fileSelect kendoFileSelect
            [async]="async"
            [attr.accept]="accept ? accept : null"
            [dir]="direction"
            [restrictions]="restrictions"
            [multiple]="multiple"
            [disabled]="disabled" />
          <span>{{textFor('select')}}</span>
        </div>
        <em>{{textFor('dropFilesHere')}}</em>
        <kendo-upload-status-total
          *ngIf="showTotalStatus()"
          [fileList]="fileList">
        </kendo-upload-status-total>
    </div>
    <ul kendo-upload-file-list
        class="k-upload-files k-reset"
        *ngIf="showFileList && fileList.count > 0"
        [async]="async"
        [disabled]="disabled"
        [fileList]="fileList.files"
        [fileTemplate]="fileTemplate">
    </ul>
    <kendo-upload-action-buttons
      *ngIf="showActionButtons()"
      [async]="async"
      [disabled]="disabled"
      [fileList]="fileList">
    </kendo-upload-action-buttons>
  `
            },] },
];
/** @nocollapse */
UploadComponent.ctorParameters = () => [
    { type: UploadService, },
    { type: LocalizationService, },
    { type: NavigationService, },
    { type: NgZone, },
    { type: ElementRef, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] },] },
];
UploadComponent.propDecorators = {
    'autoUpload': [{ type: Input },],
    'batch': [{ type: Input },],
    'withCredentials': [{ type: Input },],
    'saveField': [{ type: Input },],
    'saveHeaders': [{ type: Input },],
    'saveMethod': [{ type: Input },],
    'saveUrl': [{ type: Input },],
    'responseType': [{ type: Input },],
    'removeField': [{ type: Input },],
    'removeHeaders': [{ type: Input },],
    'removeMethod': [{ type: Input },],
    'removeUrl': [{ type: Input },],
    'multiple': [{ type: Input },],
    'disabled': [{ type: Input },],
    'showFileList': [{ type: Input },],
    'tabIndex': [{ type: Input },],
    'accept': [{ type: Input },],
    'restrictions': [{ type: Input },],
    'id': [{ type: Input },],
    'fileTemplate': [{ type: ContentChild, args: [FileTemplateDirective,] },],
    'fileSelect': [{ type: ViewChild, args: ['fileSelect',] },],
    'fileSelectButton': [{ type: ViewChild, args: ['fileSelectButton',] },],
    'blur': [{ type: Output },],
    'cancel': [{ type: Output },],
    'clear': [{ type: Output },],
    'complete': [{ type: Output },],
    'error': [{ type: Output },],
    'focus': [{ type: Output },],
    'remove': [{ type: Output },],
    'select': [{ type: Output },],
    'success': [{ type: Output },],
    'upload': [{ type: Output },],
    'uploadProgress': [{ type: Output },],
    'valueChange': [{ type: Output },],
    'dir': [{ type: HostBinding, args: ['attr.dir',] },],
    'hostDefaultClasses': [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-upload',] }, { type: HostBinding, args: ['class.k-header',] },],
    'hostDisabledClass': [{ type: HostBinding, args: ['class.k-state-disabled',] },],
    'handleKeydown': [{ type: HostListener, args: ['keydown', ['$event'],] },],
};
