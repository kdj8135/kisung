import { Directive, ElementRef, HostBinding, HostListener, Input, NgZone } from '@angular/core';
import { UploadService } from './upload.service';
import util from "./util";
import validationUtil from "./validation-util";
/**
 * @hidden
 */
export class DropZoneDirective {
    constructor(element, uploadService, _ngZone) {
        this.element = element;
        this.uploadService = uploadService;
        this._ngZone = _ngZone;
        this.hideIntervalDocument = null;
        this.hideIntervalElement = null;
        this.state = {
            active: "k-dropzone k-dropzone-active",
            hovered: "k-dropzone k-dropzone-active k-dropzone-hovered",
            inactive: "k-dropzone"
        };
        this.element = element;
        this.setClasses(this.state.inactive);
        if (!util.isDocumentAvailable()) {
            return;
        }
        this._ngZone.runOutsideAngular(() => {
            document.addEventListener("dragenter", this.onDocumentDragEnterListener.bind(this));
            document.addEventListener("dragover", this.onDocumentDragOverListener.bind(this));
        });
    }
    /**
     * @hidden
     */
    onDocumentDragEnterListener() {
        if (this.lastDragElement) {
            if (this.calculateTimeDiff(this.lastDragElement) > 100) {
                this.setClasses(this.state.active);
            }
        }
        else {
            this.setClasses(this.state.active);
        }
        this.lastDragDocument = new Date();
        if (!this.hideIntervalDocument) {
            this.hideIntervalDocument = setInterval(() => {
                if (this.calculateTimeDiff(this.lastDragDocument) < 100) {
                    return;
                }
                this.setClasses(this.state.inactive);
                clearInterval(this.hideIntervalDocument);
                this.hideIntervalDocument = null;
            }, 100);
        }
        return false;
    }
    /**
     * @hidden
     */
    onElementDragEnterListener() {
        this.setClasses(this.state.hovered);
        this.lastDragElement = new Date();
        if (!this.hideIntervalElement) {
            this.hideIntervalElement = setInterval(() => {
                if (this.calculateTimeDiff(this.lastDragElement) < 100) {
                    return;
                }
                if (this.lastDrop) {
                    let diff = this.calculateTimeDiff(this.lastDrop);
                    this.setClasses(diff > 200 ? this.state.active : this.state.inactive);
                }
                else {
                    this.setClasses(this.state.active);
                }
                clearInterval(this.hideIntervalElement);
                this.hideIntervalElement = null;
            }, 100);
        }
        return false;
    }
    /**
     * @hidden
     */
    onDocumentDragOverListener() {
        this.lastDragDocument = new Date();
        return false;
    }
    /**
     * @hidden
     */
    onElementDragOverListener() {
        this.lastDragElement = new Date();
        return false;
    }
    /**
     * @hidden
     */
    onDropListener(event) {
        this.lastDrop = new Date();
        let droppedFiles = event.dataTransfer.files;
        if (droppedFiles.length > 0 && !this.disabled) {
            let files = util.getAllFileInfo(droppedFiles);
            files = util.assignGuidToFiles(files, !this.async.batch);
            if (!this.multiple) {
                files.splice(1, files.length - 1);
                this.uploadService.clearFiles();
            }
            validationUtil.validateFiles(files, this.restrictions);
            this.uploadService.addFiles(files, this.async);
        }
        return false;
    }
    calculateTimeDiff(prevEvent) {
        return new Date().getTime() - prevEvent.getTime();
    }
    setClasses(classes) {
        if (!this.disabled) {
            this.element.nativeElement.className = classes;
        }
    }
    /**
     * @hidden
     */
    get initialClassName() {
        return true;
    }
}
DropZoneDirective.decorators = [
    { type: Directive, args: [{
                selector: '[kendoUploadDropzone]'
            },] },
];
/** @nocollapse */
DropZoneDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: UploadService, },
    { type: NgZone, },
];
DropZoneDirective.propDecorators = {
    'async': [{ type: Input },],
    'disabled': [{ type: Input },],
    'multiple': [{ type: Input },],
    'restrictions': [{ type: Input },],
    'onElementDragEnterListener': [{ type: HostListener, args: ['dragenter',] },],
    'onElementDragOverListener': [{ type: HostListener, args: ['dragover',] },],
    'onDropListener': [{ type: HostListener, args: ['drop', ['$event'],] },],
    'initialClassName': [{ type: HostBinding, args: ['class.k-dropzone',] },],
};
