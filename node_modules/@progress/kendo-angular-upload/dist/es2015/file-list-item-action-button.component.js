import { Input, Component, ViewChild } from '@angular/core';
import { FileState } from './file-info';
import { UploadService } from './upload.service';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * @hidden
 */
export class FileListItemActionButtonComponent {
    constructor(uploadService, localization) {
        this.uploadService = uploadService;
        this.localization = localization;
        this.retryFocused = false;
        this.actionFocused = false;
    }
    setButtonClasses(type) {
        return {
            'k-button k-upload-action': true,
            'k-state-focused': (this.actionFocused && type === 'action') ||
                (this.retryFocused && type === 'retry')
        };
    }
    setActionButtonClasses(file) {
        /* tslint:disable:object-literal-sort-keys */
        return {
            'k-icon': true,
            'k-cancel k-i-deny': file.state === FileState.Uploading,
            'k-delete k-i-x': file.state !== FileState.Uploading
        };
    }
    setActionButtonTitle(file) {
        if (file.state === FileState.Uploading) {
            return this.localization.get('cancel');
        }
        return this.localization.get('remove');
    }
    setRetryButtonTitle() {
        return this.localization.get('retry');
    }
    onFocus(type) {
        if (type === 'retry') {
            this.retryFocused = true;
        }
        if (type === 'action') {
            this.actionFocused = true;
        }
    }
    onBlur(type) {
        if (type === 'retry') {
            this.retryFocused = false;
        }
        if (type === 'action') {
            this.actionFocused = false;
        }
    }
    onClick(uid, type, _event) {
        const element = (type === 'retry') ? this.retryButton : this.actionButton;
        const classes = element.nativeElement.className.split(" ");
        if (this.disabled) {
            return;
        }
        if (classes.indexOf('k-delete') >= 0) {
            this.uploadService.removeFiles(uid, this.async);
        }
        else if (classes.indexOf('k-cancel') >= 0) {
            this.uploadService.cancelFiles(uid);
        }
        else if (classes.indexOf('k-retry') >= 0) {
            this.uploadService.retryFiles(uid, this.async);
        }
    }
    isVisible(file, type) {
        if (type === 'retry') {
            return file.state === FileState.Failed ? true : false;
        }
        if (type === 'progress') {
            return file.state === FileState.Uploading;
        }
        if ((file.state === FileState.Uploaded || file.state === FileState.Initial) && !this.async.removeUrl) {
            return false;
        }
        return true;
    }
}
FileListItemActionButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'kendo-upload-file-list-item-action-button',
                template: `
      <strong class="k-upload-status">
        <span class="k-upload-pct" *ngIf="isVisible(file, 'progress')">{{progress}}%</span>
        <button type="button"
          *ngIf="isVisible(file, 'retry')"
          [attr.tabIndex]="-1"
          [ngClass]="setButtonClasses('retry')"
          (focus)="onFocus('retry')"
          (blur)="onBlur('retry')"
          (click)="onClick(file.uid, 'retry', $event)">
          <span #retryButton
            [attr.aria-label]="setRetryButtonTitle()"
            [attr.title]="setRetryButtonTitle()"
            class="k-icon k-retry k-i-refresh-sm">
          </span>
        </button>
        <button type="button"
          *ngIf="isVisible(file, 'action')"
          [attr.tabIndex]="-1"
          [ngClass]="setButtonClasses('action')"
          (focus)="onFocus('action')"
          (blur)="onBlur('action')"
          (click)="onClick(file.uid, 'action', $event)">
          <span #actionButton
            [attr.aria-label]='setActionButtonTitle(file)'
            [attr.title]='setActionButtonTitle(file)'
            [ngClass]='setActionButtonClasses(file)'>
          </span>
        </button>
      </strong>
    `
            },] },
];
/** @nocollapse */
FileListItemActionButtonComponent.ctorParameters = () => [
    { type: UploadService, },
    { type: LocalizationService, },
];
FileListItemActionButtonComponent.propDecorators = {
    'file': [{ type: Input },],
    'async': [{ type: Input },],
    'disabled': [{ type: Input },],
    'progress': [{ type: Input },],
    'retryButton': [{ type: ViewChild, args: ["retryButton",] },],
    'actionButton': [{ type: ViewChild, args: ["actionButton",] },],
};
