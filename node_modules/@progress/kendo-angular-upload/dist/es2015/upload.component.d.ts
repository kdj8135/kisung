import { EventEmitter, OnDestroy, ElementRef, NgZone } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { HttpHeaders } from '@angular/common/http';
import { UploadService } from './upload.service';
import { FileMap } from './file-map';
import { FileInfo } from './file-info';
import { FileRestrictions } from './file-restrictions';
import { FileTemplateDirective } from './templates/file-template.directive';
import { NavigationService } from './navigation.service';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { CancelEvent, ClearEvent, ErrorEvent, RemoveEvent, SelectEvent, SuccessEvent, UploadEvent, UploadProgressEvent } from './upload-events';
import { AsyncSettings } from './async-settings';
import { Direction } from './direction';
/**
 * @hidden
 */
export declare const UPLOAD_VALUE_ACCESSOR: any;
/**
 * Represents the Kendo UI Upload component for Angular.
 */
export declare class UploadComponent implements OnDestroy, ControlValueAccessor {
    private uploadService;
    private localization;
    private navigation;
    private _ngZone;
    /**
     * By default, the selected files are immediately uploaded. To change this behavior, set `autoUpload` to `false`.
     */
    autoUpload: boolean;
    /**
     * When enabled, all files in the selection are uploaded in one request.
     * Any files that are selected one after the other are uploaded in separate requests.
     */
    batch: boolean;
    /**
     * Configures whether credentials (cookies, headers) will be sent for cross-site requests.
     * The default values is `true`.
     * Setting `withCredentials` has no effect on same-site requests.
     * To add credentials to the request, use the `saveHeaders` or `removeHeaders` property,
     * or the [`upload`]({% slug api_upload_uploadevent %}) event.
     */
    withCredentials: boolean;
    /**
     * Sets the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) key which contains the files submitted to `saveUrl`.
     * The default value is `files`.
     */
    saveField: string;
    /**
     * Configures the [`HttpHeaders`](https://angular.io/api/common/http/HttpHeaders)
     * that are attached to each upload request.
     */
    saveHeaders: HttpHeaders;
    /**
     * Sets the [`RequestMethod`](https://angular.io/docs/ts/latest/api/http/index/RequestMethod-enum.html) of the upload request.
     * The default value is `POST`.
     */
    saveMethod: string;
    /**
     * Sets the URL of the endpoint for the upload request.
     * The request [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) key is named after the `saveField` property.
     * It contains the list of files to be uploaded.
     */
    saveUrl: string;
    /**
     * Sets the expected [`response type`](https://angular.io/api/common/http/HttpRequest#responseType) of the server.
     * It is used to parse the response appropriately.
     * The default value is `json`.
     */
    responseType: 'arraybuffer' | 'blob' | 'json' | 'text';
    /**
     * Sets the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) key
     * which contains the list of file names that are submitted to `removeUrl`.
     * The default value is `fileNames`.
     */
    removeField: string;
    /**
     * Configures the [`HttpHeaders`](https://angular.io/api/common/http/HttpHeaders)
     * that are attached to each `remove` request.
     */
    removeHeaders: HttpHeaders;
    /**
     * Sets the [`RequestMethod`](https://angular.io/docs/ts/latest/api/http/index/RequestMethod-enum.html) of the `remove` request.
     * The default value is `POST`.
     */
    removeMethod: string;
    /**
     * Sets the URL of the endpoint for the `remove` request.
     * The [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) request key is named after the `removeField` property.
     * It contains the list of file names which will be removed.
     */
    removeUrl: string;
    /**
     * Enables the selection of multiple files.
     * If set to `false`, only one file can be selected at a time.
     */
    multiple: boolean;
    /**
     * Disables the Upload. The default value is `false`.
     */
    disabled: boolean;
    /**
     * Toggles the visibility of the file list.
     */
    showFileList: boolean;
    /**
     * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    tabIndex: number;
    /**
     * Sets the `accept` attribute of the `input` element of the Upload.
     */
    accept: string;
    /**
     * Sets the restrictions for selected files. For more information,
     * refer to the API documentation on [`FileRestrictions`]({% slug api_upload_filerestrictions %}).
     */
    restrictions: FileRestrictions;
    /**
     * @hidden
     */
    id: string;
    fileTemplate: FileTemplateDirective;
    fileSelect: ElementRef;
    fileSelectButton: ElementRef;
    /**
     * Fires when the user navigates outside the component.
     */
    blur: EventEmitter<any>;
    /**
     * Fires when the upload is canceled while in progress.
     */
    cancel: EventEmitter<CancelEvent>;
    /**
     * Fires when the file list is about to be cleared. If prevented, the files will not be cleared.
     */
    clear: EventEmitter<ClearEvent>;
    /**
     * Fires when all active uploads are completed either successfully or with errors.
     */
    complete: EventEmitter<any>;
    /**
     * Fires when an `upload` or `remove` operation has failed.
     */
    error: EventEmitter<ErrorEvent>;
    /**
     * Fires when the component is focused.
     */
    focus: EventEmitter<any>;
    /**
     * Fires when an uploaded file is about to be removed. If prevented, the files will remain in the list.
     */
    remove: EventEmitter<RemoveEvent>;
    /**
     * Fires when files are selected. If prevented, the selected files will not be added to the list.
     */
    select: EventEmitter<SelectEvent>;
    /**
     * Fires when an `upload` or `remove` operation is successfully completed.
     */
    success: EventEmitter<SuccessEvent>;
    /**
     * Fires when one or more files are about to be uploaded. If prevented, the files will neither be uploaded, nor added to the file list.
     */
    upload: EventEmitter<UploadEvent>;
    /**
     * Fires when one or more files are being uploaded.
     */
    uploadProgress: EventEmitter<UploadProgressEvent>;
    /**
     * Fires when the value of the component has changed as a result of a successful `upload`, `remove` or `clear` operation.
     */
    valueChange: EventEmitter<Array<FileInfo>>;
    readonly dir: string;
    readonly hostDefaultClasses: boolean;
    readonly hostDisabledClass: boolean;
    /**
     * @hidden
     */
    async: AsyncSettings;
    /**
     * @hidden
     */
    _restrictions: FileRestrictions;
    /**
     * @hidden
     */
    fileList: FileMap;
    direction: Direction;
    private wrapper;
    private documentClick;
    private blurSubscription;
    private wrapperFocusSubscription;
    private selectButtonFocusSubscription;
    private cancelSubscription;
    private changeSubscription;
    private clearSubscription;
    private completeSubscription;
    private errorSubscription;
    private removeSubscription;
    private selectSubscription;
    private successSubscription;
    private uploadSubscription;
    private uploadProgressSubscription;
    constructor(uploadService: UploadService, localization: LocalizationService, navigation: NavigationService, _ngZone: NgZone, wrapper: ElementRef, rtl: boolean);
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    handleKeydown(event: KeyboardEvent): void;
    /**
     * @hidden
     */
    writeValue(newValue: any): void;
    protected onTouchedCallback: Function;
    protected onChangeCallback: Function;
    /**
     * @hidden
     */
    registerOnChange(fn: any): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: any): void;
    /**
     * @hidden
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * @hidden
     */
    setSelectButtonClasses(): Object;
    /**
     * @hidden
     */
    setSelectButtonTabIndex(): number;
    /**
     * @hidden
     */
    onFileSelectButtonFocus(_event?: any): void;
    /**
     * @hidden
     */
    showActionButtons(): boolean;
    /**
     * @hidden
     */
    showTotalStatus(): boolean;
    /**
     * @hidden
     */
    textFor(key: string): string;
    /**
     * Focuses the underlying input element.
     */
    focusComponent(): void;
    /**
     * Blurs the Upload if it was previously focused.
     */
    blurComponent(): void;
    /**
     * Triggers the removal of a file or a batch of files.
     * @param uid - The `uid` of the file or a batch of files that will be removed.
     */
    removeFilesByUid(uid: string): void;
    /**
     * Triggers another upload attempt of an unsuccessfully uploaded file or a batch of files.
     * @param uid - The `uid` of the file or a batch of files to be retried.
     */
    retryUploadByUid(uid: string): void;
    /**
     * Cancels the upload of a file or a batch of files.
     * @param uid - The `uid` of the file or a batch of files that will be canceled.
     */
    cancelUploadByUid(uid: string): void;
    /**
     * Uploads the currently selected files which pass the set restrictions.
     */
    uploadFiles(): void;
    private subscribeBlur();
    private subscribeFocus();
    private onCancel();
    private onChange();
    private onClear();
    private onComplete();
    private onError();
    private onRemove();
    private onSelect();
    private onSuccess();
    private onUpload();
    private onUploadProgress();
}
