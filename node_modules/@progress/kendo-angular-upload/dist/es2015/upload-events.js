/**
 * @hidden
 */
export class PreventableEvent {
    constructor() {
        this.prevented = false;
    }
    /**
     * Prevents the default action for a specified event.
     * In this way, the source component suppresses the built-in behavior that follows the event.
     */
    preventDefault() {
        this.prevented = true;
    }
    /**
     * If the event is prevented by any of its subscribers, returns `true`.
     *
     * @returns `true` if the default action was prevented. Otherwise, returns `false`.
     */
    isDefaultPrevented() {
        return this.prevented;
    }
}
/**
 * Fires when the user cancels the process of uploading a file or a batch of files.
 *
 * {% embed_file events/cancel/upload.component.ts %}
 * {% embed_file shared/app.component.ts %}
 * {% embed_file shared/main.ts hidden %}
 *
 * Arguments for the `cancel` event:
 */
export class CancelEvent {
    /**
     * Constructs the event arguments for the `cancel` event.
     * @param files - The list of the files that were going to be uploaded.
     */
    constructor(files) {
        this.files = files;
    }
}
/**
 * Fires when the **Clear** button is clicked. At this point, the selected files are about to be cleared.
 *
 * {% embed_file events/clear/upload.component.ts %}
 * {% embed_file shared/app.component.ts %}
 * {% embed_file shared/main.ts hidden %}
 *
 */
export class ClearEvent extends PreventableEvent {
    /**
     * Constructs the event arguments for the `clear` event.
     */
    constructor() { super(); }
}
/**
 * Fires when an `upload` or `remove` operation fails.
 *
 * {% embed_file events/error/upload.component.ts %}
 * {% embed_file shared/app.component.ts %}
 * {% embed_file shared/main.ts hidden %}
 *
 * Arguments for the `error` event:
 */
export class ErrorEvent {
    /**
     * Constructs the event arguments for the `error` event.
     *
     * @param files - The list of the files that failed to be uploaded or removed.
     * @param operation - The operation type (`upload` or `remove`).
     * @param response - The response object returned by the server.
     */
    constructor(files, operation, response) {
        this.files = files;
        this.operation = operation;
        this.response = response;
    }
}
/**
 * Fires when an uploaded or selected file will be removed. If you cancel the event, the removal is prevented.
 *
 * {% embed_file events/remove/upload.component.ts %}
 * {% embed_file shared/app.component.ts %}
 * {% embed_file shared/main.ts hidden %}
 *
 * Arguments for the `remove` event:
 */
export class RemoveEvent extends PreventableEvent {
    /**
     * Constructs the event arguments for the `remove` event.
     * @param files - The list of the files that will be removed.
     * @param headers - The headers of the request.
     */
    constructor(files, headers) {
        super();
        this.files = files;
        this.headers = headers;
    }
}
/**
 * Fires when the user selects a file or multiple files for upload. If you cancel the event, the selection is prevented.
 *
 * {% embed_file events/select/upload.component.ts preview %}
 * {% embed_file shared/app.component.ts %}
 * {% embed_file shared/main.ts hidden %}
 *
 * Arguments for the `select` event:
 */
export class SelectEvent extends PreventableEvent {
    /**
     * Constructs the event arguments for the `select` event.
     * @param files - The list of the selected files.
     */
    constructor(files) {
        super();
        this.files = files;
    }
}
/**
 * Fires when the selected files are successfully uploaded or removed.
 *
 * {% embed_file events/success/upload.component.ts %}
 * {% embed_file shared/app.component.ts %}
 * {% embed_file shared/main.ts hidden %}
 *
 * Arguments for the `success` event:
 */
export class SuccessEvent extends PreventableEvent {
    /**
     * Constructs the event arguments for the `success` event.
     * @param files - The list of the files that were uploaded or removed.
     * @param operation - The operation type (`upload` or `remove`).
     * @param response - The response object returned by the server.
     */
    constructor(files, operation, response) {
        super();
        this.files = files;
        this.operation = operation;
        this.response = response;
    }
}
/**
 * Fires when one or more files will be uploaded. If you cancel the event, the upload is prevented.
 * You can add headers to the request.
 *
 * {% embed_file events/upload/upload.component.ts %}
 * {% embed_file shared/app.component.ts %}
 * {% embed_file shared/main.ts hidden %}
 *
 * Arguments for the `upload` event:
 */
export class UploadEvent extends PreventableEvent {
    /**
     * Constructs the event arguments for the `upload` event.
     * @param files - The list of the files that will be uploaded.
     * @param headers - The headers of the request.
     */
    constructor(files, headers) {
        super();
        this.files = files;
        this.headers = headers;
    }
}
/**
 * Fires while the files are being upload.
 *
 * {% embed_file events/uploadprogress/upload.component.ts %}
 * {% embed_file shared/app.component.ts %}
 * {% embed_file shared/main.ts hidden %}
 *
 * Arguments for the `uploadprogress` event:
 */
export class UploadProgressEvent {
    /**
     * Constructs the event arguments for the `uploadprogress` event.
     * @param files - The list of files that are being uploaded.
     * @param percentComplete - The portion that has been uploaded.
     */
    constructor(files, percentComplete) {
        this.files = files;
        this.percentComplete = percentComplete;
    }
}
