import { Directive, ElementRef, HostBinding, HostListener, Input } from '@angular/core';
import { UploadService } from './upload.service';
import { NavigationService } from './navigation.service';
import util from "./util";
import validationUtil from "./validation-util";
/**
 * @hidden
 */
export class FileSelectDirective {
    constructor(uploadService, navigation, el) {
        this.uploadService = uploadService;
        this.navigation = navigation;
        this.type = "file";
        this.autocomplete = "off";
        this.tabIndex = -1;
        this.element = el;
    }
    get nameAttribute() {
        return this.async.saveField;
    }
    get multipleAttribute() {
        return this.multiple ? "multiple" : null;
    }
    get dirAttribute() {
        return this.dir;
    }
    get disabledAttribute() {
        return this.disabled ? "true" : null;
    }
    onInputChange(event) {
        const ua = navigator.userAgent;
        const chrome = /(chrome)[ \/]([\w.]+)/i;
        const safari = /(webkit)[ \/]([\w.]+)/i;
        let selectedFiles = util.inputFiles(event.target);
        selectedFiles = util.assignGuidToFiles(selectedFiles, !this.async.batch);
        validationUtil.validateFiles(selectedFiles, this.restrictions);
        if (!this.multiple) {
            this.uploadService.clearFiles();
        }
        this.uploadService.addFiles(selectedFiles, this.async);
        /*
        Chrome and Internet Explorer do not trigger a `change` event
        when a file with the same name is selected a number of consecutive times.
        As a workaround, clear the input value after handling the file.
        */
        const native = this.element.nativeElement;
        if (!(!ua.match(chrome) && ua.match(safari))) {
            native.type = "";
            native.type = "file";
        }
        setTimeout(() => {
            this.navigation.focusedIndex = -1;
        });
    }
}
FileSelectDirective.decorators = [
    { type: Directive, args: [{
                selector: '[kendoFileSelect]'
            },] },
];
/** @nocollapse */
FileSelectDirective.ctorParameters = () => [
    { type: UploadService, },
    { type: NavigationService, },
    { type: ElementRef, },
];
FileSelectDirective.propDecorators = {
    'async': [{ type: Input },],
    'dir': [{ type: Input },],
    'disabled': [{ type: Input },],
    'multiple': [{ type: Input },],
    'restrictions': [{ type: Input },],
    'type': [{ type: HostBinding, args: ["attr.type",] },],
    'autocomplete': [{ type: HostBinding, args: ["attr.autocomplete",] },],
    'tabIndex': [{ type: HostBinding, args: ["attr.tabIndex",] },],
    'nameAttribute': [{ type: HostBinding, args: ["attr.name",] },],
    'multipleAttribute': [{ type: HostBinding, args: ["attr.multiple",] },],
    'dirAttribute': [{ type: HostBinding, args: ["attr.dir",] },],
    'disabledAttribute': [{ type: HostBinding, args: ["attr.disabled",] },],
    'onInputChange': [{ type: HostListener, args: ["change", ["$event"],] },],
};
