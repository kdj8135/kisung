import { HttpHeaders, HttpResponse } from '@angular/common/http';
import { FileInfo } from './file-info';
/**
 * Defines the operation (`upload` or `remove`) for which the `success` or `error` event is raised.
 */
export declare type OperationType = "upload" | "remove";
/**
 * @hidden
 */
export declare abstract class PreventableEvent {
    private prevented;
    /**
     * Prevents the default action for a specified event.
     * In this way, the source component suppresses the built-in behavior that follows the event.
     */
    preventDefault(): void;
    /**
     * If the event is prevented by any of its subscribers, returns `true`.
     *
     * @returns `true` if the default action was prevented. Otherwise, returns `false`.
     */
    isDefaultPrevented(): boolean;
}
/**
 * Fires when the user cancels the process of uploading a file or a batch of files.
 *
 * {% embed_file events/cancel/upload.component.ts %}
 * {% embed_file shared/app.component.ts %}
 * {% embed_file shared/main.ts hidden %}
 *
 * Arguments for the `cancel` event:
 */
export declare class CancelEvent {
    files: Array<FileInfo>;
    /**
     * Constructs the event arguments for the `cancel` event.
     * @param files - The list of the files that were going to be uploaded.
     */
    constructor(files: Array<FileInfo>);
}
/**
 * Fires when the **Clear** button is clicked. At this point, the selected files are about to be cleared.
 *
 * {% embed_file events/clear/upload.component.ts %}
 * {% embed_file shared/app.component.ts %}
 * {% embed_file shared/main.ts hidden %}
 *
 */
export declare class ClearEvent extends PreventableEvent {
    /**
     * Constructs the event arguments for the `clear` event.
     */
    constructor();
}
/**
 * Fires when an `upload` or `remove` operation fails.
 *
 * {% embed_file events/error/upload.component.ts %}
 * {% embed_file shared/app.component.ts %}
 * {% embed_file shared/main.ts hidden %}
 *
 * Arguments for the `error` event:
 */
export declare class ErrorEvent {
    files: Array<FileInfo>;
    operation: OperationType;
    response: HttpResponse<any>;
    /**
     * Constructs the event arguments for the `error` event.
     *
     * @param files - The list of the files that failed to be uploaded or removed.
     * @param operation - The operation type (`upload` or `remove`).
     * @param response - The response object returned by the server.
     */
    constructor(files: Array<FileInfo>, operation: OperationType, response: HttpResponse<any>);
}
/**
 * Fires when an uploaded or selected file will be removed. If you cancel the event, the removal is prevented.
 *
 * {% embed_file events/remove/upload.component.ts %}
 * {% embed_file shared/app.component.ts %}
 * {% embed_file shared/main.ts hidden %}
 *
 * Arguments for the `remove` event:
 */
export declare class RemoveEvent extends PreventableEvent {
    files: Array<FileInfo>;
    headers: HttpHeaders;
    /**
     * An optional object that is sent to the `remove` handler in the form of a key/value pair.
     */
    data: Object;
    /**
     * Constructs the event arguments for the `remove` event.
     * @param files - The list of the files that will be removed.
     * @param headers - The headers of the request.
     */
    constructor(files: Array<FileInfo>, headers: HttpHeaders);
}
/**
 * Fires when the user selects a file or multiple files for upload. If you cancel the event, the selection is prevented.
 *
 * {% embed_file events/select/upload.component.ts preview %}
 * {% embed_file shared/app.component.ts %}
 * {% embed_file shared/main.ts hidden %}
 *
 * Arguments for the `select` event:
 */
export declare class SelectEvent extends PreventableEvent {
    files: Array<FileInfo>;
    /**
     * Constructs the event arguments for the `select` event.
     * @param files - The list of the selected files.
     */
    constructor(files: Array<FileInfo>);
}
/**
 * Fires when the selected files are successfully uploaded or removed.
 *
 * {% embed_file events/success/upload.component.ts %}
 * {% embed_file shared/app.component.ts %}
 * {% embed_file shared/main.ts hidden %}
 *
 * Arguments for the `success` event:
 */
export declare class SuccessEvent extends PreventableEvent {
    files: Array<FileInfo>;
    operation: OperationType;
    response: HttpResponse<any>;
    /**
     * Constructs the event arguments for the `success` event.
     * @param files - The list of the files that were uploaded or removed.
     * @param operation - The operation type (`upload` or `remove`).
     * @param response - The response object returned by the server.
     */
    constructor(files: Array<FileInfo>, operation: OperationType, response: HttpResponse<any>);
}
/**
 * Fires when one or more files will be uploaded. If you cancel the event, the upload is prevented.
 * You can add headers to the request.
 *
 * {% embed_file events/upload/upload.component.ts %}
 * {% embed_file shared/app.component.ts %}
 * {% embed_file shared/main.ts hidden %}
 *
 * Arguments for the `upload` event:
 */
export declare class UploadEvent extends PreventableEvent {
    files: Array<FileInfo>;
    headers: HttpHeaders;
    /**
     * The optional object that is sent to the `upload` handler in the form of key/value pair.
     * {% embed_file events/upload2/upload.component.ts %}
     * {% embed_file shared/app.component.ts %}
     * {% embed_file shared/main.ts hidden %}
     */
    data: Object;
    /**
     * Constructs the event arguments for the `upload` event.
     * @param files - The list of the files that will be uploaded.
     * @param headers - The headers of the request.
     */
    constructor(files: Array<FileInfo>, headers: HttpHeaders);
}
/**
 * Fires while the files are being upload.
 *
 * {% embed_file events/uploadprogress/upload.component.ts %}
 * {% embed_file shared/app.component.ts %}
 * {% embed_file shared/main.ts hidden %}
 *
 * Arguments for the `uploadprogress` event:
 */
export declare class UploadProgressEvent {
    files: Array<FileInfo>;
    percentComplete: Number;
    /**
     * Constructs the event arguments for the `uploadprogress` event.
     * @param files - The list of files that are being uploaded.
     * @param percentComplete - The portion that has been uploaded.
     */
    constructor(files: Array<FileInfo>, percentComplete: Number);
}
