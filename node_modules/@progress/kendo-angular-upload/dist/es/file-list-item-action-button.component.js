import { Input, Component, ViewChild } from '@angular/core';
import { FileState } from './file-info';
import { UploadService } from './upload.service';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * @hidden
 */
var FileListItemActionButtonComponent = /** @class */ (function () {
    function FileListItemActionButtonComponent(uploadService, localization) {
        this.uploadService = uploadService;
        this.localization = localization;
        this.retryFocused = false;
        this.actionFocused = false;
    }
    FileListItemActionButtonComponent.prototype.setButtonClasses = function (type) {
        return {
            'k-button k-upload-action': true,
            'k-state-focused': (this.actionFocused && type === 'action') ||
                (this.retryFocused && type === 'retry')
        };
    };
    FileListItemActionButtonComponent.prototype.setActionButtonClasses = function (file) {
        /* tslint:disable:object-literal-sort-keys */
        return {
            'k-icon': true,
            'k-cancel k-i-deny': file.state === FileState.Uploading,
            'k-delete k-i-x': file.state !== FileState.Uploading
        };
    };
    FileListItemActionButtonComponent.prototype.setActionButtonTitle = function (file) {
        if (file.state === FileState.Uploading) {
            return this.localization.get('cancel');
        }
        return this.localization.get('remove');
    };
    FileListItemActionButtonComponent.prototype.setRetryButtonTitle = function () {
        return this.localization.get('retry');
    };
    FileListItemActionButtonComponent.prototype.onFocus = function (type) {
        if (type === 'retry') {
            this.retryFocused = true;
        }
        if (type === 'action') {
            this.actionFocused = true;
        }
    };
    FileListItemActionButtonComponent.prototype.onBlur = function (type) {
        if (type === 'retry') {
            this.retryFocused = false;
        }
        if (type === 'action') {
            this.actionFocused = false;
        }
    };
    FileListItemActionButtonComponent.prototype.onClick = function (uid, type, _event) {
        var element = (type === 'retry') ? this.retryButton : this.actionButton;
        var classes = element.nativeElement.className.split(" ");
        if (this.disabled) {
            return;
        }
        if (classes.indexOf('k-delete') >= 0) {
            this.uploadService.removeFiles(uid, this.async);
        }
        else if (classes.indexOf('k-cancel') >= 0) {
            this.uploadService.cancelFiles(uid);
        }
        else if (classes.indexOf('k-retry') >= 0) {
            this.uploadService.retryFiles(uid, this.async);
        }
    };
    FileListItemActionButtonComponent.prototype.isVisible = function (file, type) {
        if (type === 'retry') {
            return file.state === FileState.Failed ? true : false;
        }
        if (type === 'progress') {
            return file.state === FileState.Uploading;
        }
        if ((file.state === FileState.Uploaded || file.state === FileState.Initial) && !this.async.removeUrl) {
            return false;
        }
        return true;
    };
    FileListItemActionButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'kendo-upload-file-list-item-action-button',
                    template: "\n      <strong class=\"k-upload-status\">\n        <span class=\"k-upload-pct\" *ngIf=\"isVisible(file, 'progress')\">{{progress}}%</span>\n        <button type=\"button\"\n          *ngIf=\"isVisible(file, 'retry')\"\n          [attr.tabIndex]=\"-1\"\n          [ngClass]=\"setButtonClasses('retry')\"\n          (focus)=\"onFocus('retry')\"\n          (blur)=\"onBlur('retry')\"\n          (click)=\"onClick(file.uid, 'retry', $event)\">\n          <span #retryButton\n            [attr.aria-label]=\"setRetryButtonTitle()\"\n            [attr.title]=\"setRetryButtonTitle()\"\n            class=\"k-icon k-retry k-i-refresh-sm\">\n          </span>\n        </button>\n        <button type=\"button\"\n          *ngIf=\"isVisible(file, 'action')\"\n          [attr.tabIndex]=\"-1\"\n          [ngClass]=\"setButtonClasses('action')\"\n          (focus)=\"onFocus('action')\"\n          (blur)=\"onBlur('action')\"\n          (click)=\"onClick(file.uid, 'action', $event)\">\n          <span #actionButton\n            [attr.aria-label]='setActionButtonTitle(file)'\n            [attr.title]='setActionButtonTitle(file)'\n            [ngClass]='setActionButtonClasses(file)'>\n          </span>\n        </button>\n      </strong>\n    "
                },] },
    ];
    /** @nocollapse */
    FileListItemActionButtonComponent.ctorParameters = function () { return [
        { type: UploadService, },
        { type: LocalizationService, },
    ]; };
    FileListItemActionButtonComponent.propDecorators = {
        'file': [{ type: Input },],
        'async': [{ type: Input },],
        'disabled': [{ type: Input },],
        'progress': [{ type: Input },],
        'retryButton': [{ type: ViewChild, args: ["retryButton",] },],
        'actionButton': [{ type: ViewChild, args: ["actionButton",] },],
    };
    return FileListItemActionButtonComponent;
}());
export { FileListItemActionButtonComponent };
