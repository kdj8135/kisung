/* tslint:disable: no-use-before-declare */
import { Component, Input, Output, EventEmitter, forwardRef, HostBinding, HostListener, Optional, Inject, ContentChild, ViewChild, ElementRef, NgZone } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { HttpHeaders } from '@angular/common/http';
import { fromEvent } from 'rxjs/observable/fromEvent';
import { filter } from 'rxjs/operators/filter';
import { merge } from 'rxjs/operators/merge';
import { UploadService } from './upload.service';
import { FileState } from './file-info';
import { FileTemplateDirective } from './templates/file-template.directive';
import { Keys, NavigationService } from './navigation.service';
import { L10N_PREFIX, LocalizationService, RTL } from '@progress/kendo-angular-l10n';
import util from "./util";
/**
 * @hidden
 */
export var UPLOAD_VALUE_ACCESSOR = {
    multi: true,
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return UploadComponent; })
};
/**
 * Represents the Kendo UI Upload component for Angular.
 */
var UploadComponent = /** @class */ (function () {
    function UploadComponent(uploadService, localization, navigation, _ngZone, wrapper, rtl) {
        this.uploadService = uploadService;
        this.localization = localization;
        this.navigation = navigation;
        this._ngZone = _ngZone;
        /**
         * Enables the selection of multiple files.
         * If set to `false`, only one file can be selected at a time.
         */
        this.multiple = true;
        /**
         * Disables the Upload. The default value is `false`.
         */
        this.disabled = false;
        /**
         * Toggles the visibility of the file list.
         */
        this.showFileList = true;
        /**
         * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabIndex = 0;
        /**
         * @hidden
         */
        this.id = util.guid();
        /**
         * Fires when the user navigates outside the component.
         */
        this.blur = new EventEmitter();
        /**
         * Fires when the upload is canceled while in progress.
         */
        this.cancel = new EventEmitter();
        /**
         * Fires when the file list is about to be cleared. If prevented, the files will not be cleared.
         */
        this.clear = new EventEmitter();
        /**
         * Fires when all active uploads are completed either successfully or with errors.
         */
        this.complete = new EventEmitter();
        /**
         * Fires when an `upload` or `remove` operation has failed.
         */
        this.error = new EventEmitter();
        /**
         * Fires when the component is focused.
         */
        this.focus = new EventEmitter();
        /**
         * Fires when an uploaded file is about to be removed. If prevented, the files will remain in the list.
         */
        this.remove = new EventEmitter();
        /**
         * Fires when files are selected. If prevented, the selected files will not be added to the list.
         */
        this.select = new EventEmitter();
        /**
         * Fires when an `upload` or `remove` operation is successfully completed.
         */
        this.success = new EventEmitter();
        /**
         * Fires when one or more files are about to be uploaded. If prevented, the files will neither be uploaded, nor added to the file list.
         */
        this.upload = new EventEmitter();
        /**
         * Fires when one or more files are being uploaded.
         */
        this.uploadProgress = new EventEmitter();
        /**
         * Fires when the value of the component has changed as a result of a successful `upload`, `remove` or `clear` operation.
         */
        this.valueChange = new EventEmitter();
        /**
         * @hidden
         */
        this.async = {
            autoUpload: true,
            batch: false,
            removeField: "fileNames",
            removeHeaders: new HttpHeaders(),
            removeMethod: "POST",
            removeUrl: "",
            responseType: "json",
            saveField: "files",
            saveHeaders: new HttpHeaders(),
            saveMethod: "POST",
            saveUrl: "",
            withCredentials: true
        };
        /**
         * @hidden
         */
        this._restrictions = {
            allowedExtensions: [],
            maxFileSize: 0,
            minFileSize: 0
        };
        this.onTouchedCallback = function (_) { };
        this.onChangeCallback = function (_) { };
        this.fileList = this.uploadService.files;
        this.direction = rtl ? 'rtl' : 'ltr';
        this.navigation.computeKeys(this.direction);
        this.wrapper = wrapper.nativeElement;
        this.subscribeBlur();
        this.subscribeFocus();
        this.onCancel();
        this.onChange();
        this.onClear();
        this.onComplete();
        this.onError();
        this.onRemove();
        this.onSelect();
        this.onSuccess();
        this.onUpload();
        this.onUploadProgress();
    }
    Object.defineProperty(UploadComponent.prototype, "autoUpload", {
        get: function () { return this.async.autoUpload; },
        /**
         * By default, the selected files are immediately uploaded. To change this behavior, set `autoUpload` to `false`.
         */
        set: function (autoUpload) { this.async.autoUpload = autoUpload; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadComponent.prototype, "batch", {
        get: function () { return this.async.batch; },
        /**
         * When enabled, all files in the selection are uploaded in one request.
         * Any files that are selected one after the other are uploaded in separate requests.
         */
        set: function (batch) { this.async.batch = batch; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadComponent.prototype, "withCredentials", {
        get: function () { return this.async.withCredentials; },
        /**
         * Configures whether credentials (cookies, headers) will be sent for cross-site requests.
         * The default values is `true`.
         * Setting `withCredentials` has no effect on same-site requests.
         * To add credentials to the request, use the `saveHeaders` or `removeHeaders` property,
         * or the [`upload`]({% slug api_upload_uploadevent %}) event.
         */
        set: function (withCredentials) { this.async.withCredentials = withCredentials; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadComponent.prototype, "saveField", {
        get: function () { return this.async.saveField; },
        /**
         * Sets the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) key which contains the files submitted to `saveUrl`.
         * The default value is `files`.
         */
        set: function (saveField) { this.async.saveField = saveField; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadComponent.prototype, "saveHeaders", {
        get: function () { return this.async.saveHeaders; },
        /**
         * Configures the [`HttpHeaders`](https://angular.io/api/common/http/HttpHeaders)
         * that are attached to each upload request.
         */
        set: function (saveHeaders) { this.async.saveHeaders = saveHeaders; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadComponent.prototype, "saveMethod", {
        get: function () { return this.async.saveMethod; },
        /**
         * Sets the [`RequestMethod`](https://angular.io/docs/ts/latest/api/http/index/RequestMethod-enum.html) of the upload request.
         * The default value is `POST`.
         */
        set: function (saveMethod) { this.async.saveMethod = saveMethod; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadComponent.prototype, "saveUrl", {
        get: function () { return this.async.saveUrl; },
        /**
         * Sets the URL of the endpoint for the upload request.
         * The request [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) key is named after the `saveField` property.
         * It contains the list of files to be uploaded.
         */
        set: function (saveUrl) { this.async.saveUrl = saveUrl; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadComponent.prototype, "responseType", {
        get: function () { return this.async.responseType; },
        /**
         * Sets the expected [`response type`](https://angular.io/api/common/http/HttpRequest#responseType) of the server.
         * It is used to parse the response appropriately.
         * The default value is `json`.
         */
        set: function (responseType) { this.async.responseType = responseType; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadComponent.prototype, "removeField", {
        get: function () { return this.async.removeField; },
        /**
         * Sets the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) key
         * which contains the list of file names that are submitted to `removeUrl`.
         * The default value is `fileNames`.
         */
        set: function (removeField) { this.async.removeField = removeField; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadComponent.prototype, "removeHeaders", {
        get: function () { return this.async.removeHeaders; },
        /**
         * Configures the [`HttpHeaders`](https://angular.io/api/common/http/HttpHeaders)
         * that are attached to each `remove` request.
         */
        set: function (removeHeaders) { this.async.removeHeaders = removeHeaders; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadComponent.prototype, "removeMethod", {
        get: function () { return this.async.removeMethod; },
        /**
         * Sets the [`RequestMethod`](https://angular.io/docs/ts/latest/api/http/index/RequestMethod-enum.html) of the `remove` request.
         * The default value is `POST`.
         */
        set: function (removeMethod) { this.async.removeMethod = removeMethod; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadComponent.prototype, "removeUrl", {
        get: function () { return this.async.removeUrl; },
        /**
         * Sets the URL of the endpoint for the `remove` request.
         * The [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) request key is named after the `removeField` property.
         * It contains the list of file names which will be removed.
         */
        set: function (removeUrl) { this.async.removeUrl = removeUrl; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadComponent.prototype, "restrictions", {
        get: function () {
            return this._restrictions;
        },
        /**
         * Sets the restrictions for selected files. For more information,
         * refer to the API documentation on [`FileRestrictions`]({% slug api_upload_filerestrictions %}).
         */
        set: function (restrictions) {
            var parsedRestrictions = Object.assign({}, this._restrictions, restrictions);
            this._restrictions = parsedRestrictions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadComponent.prototype, "dir", {
        get: function () {
            return this.direction;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadComponent.prototype, "hostDefaultClasses", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploadComponent.prototype, "hostDisabledClass", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    UploadComponent.prototype.ngOnDestroy = function () {
        this.fileList.clear();
        if (this.blurSubscription) {
            this.blurSubscription.unsubscribe();
        }
        if (this.wrapperFocusSubscription) {
            this.wrapperFocusSubscription.unsubscribe();
        }
        if (this.selectButtonFocusSubscription) {
            this.selectButtonFocusSubscription.unsubscribe();
        }
        if (this.cancelSubscription) {
            this.cancelSubscription.unsubscribe();
        }
        if (this.changeSubscription) {
            this.changeSubscription.unsubscribe();
        }
        if (this.clearSubscription) {
            this.clearSubscription.unsubscribe();
        }
        if (this.completeSubscription) {
            this.completeSubscription.unsubscribe();
        }
        if (this.errorSubscription) {
            this.errorSubscription.unsubscribe();
        }
        if (this.removeSubscription) {
            this.removeSubscription.unsubscribe();
        }
        if (this.selectSubscription) {
            this.selectSubscription.unsubscribe();
        }
        if (this.successSubscription) {
            this.successSubscription.unsubscribe();
        }
        if (this.successSubscription) {
            this.uploadSubscription.unsubscribe();
        }
        if (this.uploadProgressSubscription) {
            this.uploadProgressSubscription.unsubscribe();
        }
    };
    /**
     * @hidden
     */
    UploadComponent.prototype.handleKeydown = function (event) {
        if (this.disabled) {
            return;
        }
        if ((event.keyCode === Keys.enter || event.keyCode === Keys.space) &&
            event.target === this.fileSelectButton.nativeElement) {
            event.preventDefault();
            this.fileSelect.nativeElement.click();
            return;
        }
        if (util.hasClasses(event.target, util.UPLOAD_CLASSES) ||
            (!util.isFocusable(event.target) && !util.hasClasses(event.target, util.IGNORE_TARGET_CLASSSES))) {
            this.navigation.process(event);
        }
    };
    /**
     * @hidden
     */
    UploadComponent.prototype.writeValue = function (newValue) {
        var isValid = true;
        if (newValue instanceof Array) {
            newValue.forEach(function (file) {
                if (!util.validateInitialFileInfo(file)) {
                    isValid = false;
                }
            });
            if (isValid) {
                this.uploadService.addInitialFiles(newValue);
            }
        }
    };
    /**
     * @hidden
     */
    UploadComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @hidden
     */
    UploadComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @hidden
     */
    UploadComponent.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * @hidden
     */
    UploadComponent.prototype.setSelectButtonClasses = function () {
        return {
            "k-button": true,
            "k-state-focused": this.fileSelectButton.nativeElement.focused,
            "k-upload-button": true
        };
    };
    /**
     * @hidden
     */
    UploadComponent.prototype.setSelectButtonTabIndex = function () {
        return this.disabled ? undefined : this.tabIndex;
    };
    /**
     * @hidden
     */
    UploadComponent.prototype.onFileSelectButtonFocus = function (_event) {
        if (!this.navigation.focused) {
            this.navigation.focusedIndex = -1;
        }
    };
    /**
     * @hidden
     */
    UploadComponent.prototype.showActionButtons = function () {
        var areVisible = this.fileList.filesToUpload.length > 0 && !this.async.autoUpload;
        this.navigation.actionButtonsVisible = areVisible;
        return areVisible;
    };
    /**
     * @hidden
     */
    UploadComponent.prototype.showTotalStatus = function () {
        var states = [
            FileState.Uploaded,
            FileState.Uploading,
            FileState.Failed
        ];
        if (this.fileList.count === 0) {
            return false;
        }
        if (this.fileList.hasFileWithState(states)) {
            return true;
        }
        return false;
    };
    /**
     * @hidden
     */
    UploadComponent.prototype.textFor = function (key) {
        return this.localization.get(key);
    };
    /**
     * Focuses the underlying input element.
     */
    UploadComponent.prototype.focusComponent = function () {
        var _this = this;
        setTimeout(function () {
            _this.fileSelectButton.nativeElement.focus();
        });
    };
    /**
     * Blurs the Upload if it was previously focused.
     */
    UploadComponent.prototype.blurComponent = function () {
        if (this.navigation.focused) {
            this.navigation.focused = false;
            document.activeElement.blur();
            this.blur.emit();
        }
    };
    /**
     * Triggers the removal of a file or a batch of files.
     * @param uid - The `uid` of the file or a batch of files that will be removed.
     */
    UploadComponent.prototype.removeFilesByUid = function (uid) {
        this.uploadService.removeFiles(uid, this.async);
    };
    /**
     * Triggers another upload attempt of an unsuccessfully uploaded file or a batch of files.
     * @param uid - The `uid` of the file or a batch of files to be retried.
     */
    UploadComponent.prototype.retryUploadByUid = function (uid) {
        this.uploadService.retryFiles(uid, this.async);
    };
    /**
     * Cancels the upload of a file or a batch of files.
     * @param uid - The `uid` of the file or a batch of files that will be canceled.
     */
    UploadComponent.prototype.cancelUploadByUid = function (uid) {
        this.uploadService.cancelFiles(uid);
    };
    /**
     * Uploads the currently selected files which pass the set restrictions.
     */
    UploadComponent.prototype.uploadFiles = function () {
        if (this.fileList.filesToUpload.length) {
            this.uploadService.uploadFiles(this.async);
        }
    };
    UploadComponent.prototype.subscribeBlur = function () {
        var _this = this;
        if (!util.isDocumentAvailable()) {
            return;
        }
        this._ngZone.runOutsideAngular(function () {
            _this.documentClick = fromEvent(document, 'click').pipe(filter(function (event) {
                return !(_this.wrapper !== event.target && _this.wrapper.contains(event.target));
            }));
            _this.blurSubscription = _this.documentClick
                .pipe(merge(_this.navigation.onTab))
                .subscribe(function () { return _this._ngZone.run(function () {
                if (_this.navigation.focused) {
                    _this.navigation.focused = false;
                    _this.onTouchedCallback();
                    _this.blur.emit();
                }
            }); });
        });
    };
    UploadComponent.prototype.subscribeFocus = function () {
        var _this = this;
        this.wrapperFocusSubscription = this.navigation.onWrapperFocus.subscribe(function () {
            _this.focus.emit();
        });
        this.selectButtonFocusSubscription = this.navigation.onSelectButtonFocus.subscribe(function () {
            _this.fileSelectButton.nativeElement.focus();
        });
    };
    UploadComponent.prototype.onCancel = function () {
        var _this = this;
        this.cancelSubscription = this.uploadService.cancelEvent.subscribe(function (args) {
            _this.cancel.emit(args);
        });
    };
    UploadComponent.prototype.onChange = function () {
        var _this = this;
        this.changeSubscription = this.uploadService.changeEvent.subscribe(function (files) {
            _this.onChangeCallback(files);
            _this.valueChange.emit(files);
        });
    };
    UploadComponent.prototype.onClear = function () {
        var _this = this;
        this.clearSubscription = this.uploadService.clearEvent.subscribe(function (args) {
            _this.clear.emit(args);
        });
    };
    UploadComponent.prototype.onComplete = function () {
        var _this = this;
        this.completeSubscription = this.uploadService.completeEvent.subscribe(function () {
            _this.complete.emit();
        });
    };
    UploadComponent.prototype.onError = function () {
        var _this = this;
        this.errorSubscription = this.uploadService.errorEvent.subscribe(function (args) {
            _this.error.emit(args);
        });
    };
    UploadComponent.prototype.onRemove = function () {
        var _this = this;
        this.removeSubscription = this.uploadService.removeEvent.subscribe(function (args) {
            _this.remove.emit(args);
        });
    };
    UploadComponent.prototype.onSelect = function () {
        var _this = this;
        this.selectSubscription = this.uploadService.selectEvent.subscribe(function (args) {
            _this.select.emit(args);
        });
    };
    UploadComponent.prototype.onSuccess = function () {
        var _this = this;
        this.successSubscription = this.uploadService.successEvent.subscribe(function (args) {
            _this.success.emit(args);
        });
    };
    UploadComponent.prototype.onUpload = function () {
        var _this = this;
        this.uploadSubscription = this.uploadService.uploadEvent.subscribe(function (args) {
            _this.upload.emit(args);
        });
    };
    UploadComponent.prototype.onUploadProgress = function () {
        var _this = this;
        this.uploadProgressSubscription = this.uploadService.uploadProgressEvent.subscribe(function (args) {
            _this.uploadProgress.emit(args);
        });
    };
    UploadComponent.decorators = [
        { type: Component, args: [{
                    exportAs: 'kendoUpload',
                    providers: [
                        LocalizationService,
                        NavigationService,
                        UploadService,
                        UPLOAD_VALUE_ACCESSOR,
                        {
                            provide: L10N_PREFIX,
                            useValue: 'kendo.upload'
                        }
                    ],
                    selector: 'kendo-upload',
                    template: "\n    <ng-container kendoUploadLocalizedMessages\n      i18n-cancel=\"kendo.upload.cancel|The text for the Cancel button\"\n      cancel=\"Cancel\"\n\n      i18n-clearSelectedFiles=\"kendo.upload.clearSelectedFiles|The text for the Clear button\"\n      clearSelectedFiles=\"Clear\"\n\n      i18n-dropFilesHere=\"kendo.upload.dropFilesHere|The drop zone hint\"\n      dropFilesHere=\"Drop files here to upload\"\n\n      i18n-headerStatusUploaded=\"kendo.upload.headerStatusUploaded|The header status message after file upload completion\"\n      headerStatusUploaded=\"Done\"\n\n      i18n-headerStatusUploading=\"kendo.upload.headerStatusUploading|The header status message during file upload\"\n      headerStatusUploading=\"Uploading...\"\n\n      i18n-invalidFileExtension=\"kendo.upload.invalidFileExtension|The text for the invalid allowed extensions restriction message\"\n      invalidFileExtension=\"File type not allowed.\"\n\n      i18n-invalidFiles=\"kendo.upload.invalidFiles|The text for the invalid files message\"\n      invalidFiles=\"Invalid file(s). Please check file upload requirements.\"\n\n      i18n-invalidMaxFileSize=\"kendo.upload.invalidMaxFileSize|The text for the invalid max file size restriction message\"\n      invalidMaxFileSize=\"File size too large.\"\n\n      i18n-invalidMinFileSize=\"kendo.upload.invalidMinFileSize|The text for the invalid min file size restriction message\"\n      invalidMinFileSize=\"File size too small.\"\n\n      i18n-remove=\"kendo.upload.remove|The text for the Remove button\"\n      remove=\"Remove\"\n\n      i18n-retry=\"kendo.upload.retry|The text for the Retry button\"\n      retry=\"Retry\"\n\n      i18n-select=\"kendo.upload.select|The text for the Select button\"\n      select=\"Select files...\"\n\n      i18n-uploadSelectedFiles=\"kendo.upload.uploadSelectedFiles|The text for the Upload files button\"\n      uploadSelectedFiles=\"Upload\"\n    >\n    </ng-container>\n    <div kendoUploadDropzone\n      [async]=\"async\"\n      [restrictions]=\"restrictions\"\n      [multiple]=\"multiple\"\n      [disabled]=\"disabled\">\n        <div role=\"button\" #fileSelectButton\n             [id]=\"id\"\n             [ngClass]='setSelectButtonClasses()'\n             [attr.aria-label]=\"textFor('select')\"\n             [attr.tabIndex]=\"setSelectButtonTabIndex()\"\n             (focus)=\"onFileSelectButtonFocus($event)\">\n          <input #fileSelect kendoFileSelect\n            [async]=\"async\"\n            [attr.accept]=\"accept ? accept : null\"\n            [dir]=\"direction\"\n            [restrictions]=\"restrictions\"\n            [multiple]=\"multiple\"\n            [disabled]=\"disabled\" />\n          <span>{{textFor('select')}}</span>\n        </div>\n        <em>{{textFor('dropFilesHere')}}</em>\n        <kendo-upload-status-total\n          *ngIf=\"showTotalStatus()\"\n          [fileList]=\"fileList\">\n        </kendo-upload-status-total>\n    </div>\n    <ul kendo-upload-file-list\n        class=\"k-upload-files k-reset\"\n        *ngIf=\"showFileList && fileList.count > 0\"\n        [async]=\"async\"\n        [disabled]=\"disabled\"\n        [fileList]=\"fileList.files\"\n        [fileTemplate]=\"fileTemplate\">\n    </ul>\n    <kendo-upload-action-buttons\n      *ngIf=\"showActionButtons()\"\n      [async]=\"async\"\n      [disabled]=\"disabled\"\n      [fileList]=\"fileList\">\n    </kendo-upload-action-buttons>\n  "
                },] },
    ];
    /** @nocollapse */
    UploadComponent.ctorParameters = function () { return [
        { type: UploadService, },
        { type: LocalizationService, },
        { type: NavigationService, },
        { type: NgZone, },
        { type: ElementRef, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] },] },
    ]; };
    UploadComponent.propDecorators = {
        'autoUpload': [{ type: Input },],
        'batch': [{ type: Input },],
        'withCredentials': [{ type: Input },],
        'saveField': [{ type: Input },],
        'saveHeaders': [{ type: Input },],
        'saveMethod': [{ type: Input },],
        'saveUrl': [{ type: Input },],
        'responseType': [{ type: Input },],
        'removeField': [{ type: Input },],
        'removeHeaders': [{ type: Input },],
        'removeMethod': [{ type: Input },],
        'removeUrl': [{ type: Input },],
        'multiple': [{ type: Input },],
        'disabled': [{ type: Input },],
        'showFileList': [{ type: Input },],
        'tabIndex': [{ type: Input },],
        'accept': [{ type: Input },],
        'restrictions': [{ type: Input },],
        'id': [{ type: Input },],
        'fileTemplate': [{ type: ContentChild, args: [FileTemplateDirective,] },],
        'fileSelect': [{ type: ViewChild, args: ['fileSelect',] },],
        'fileSelectButton': [{ type: ViewChild, args: ['fileSelectButton',] },],
        'blur': [{ type: Output },],
        'cancel': [{ type: Output },],
        'clear': [{ type: Output },],
        'complete': [{ type: Output },],
        'error': [{ type: Output },],
        'focus': [{ type: Output },],
        'remove': [{ type: Output },],
        'select': [{ type: Output },],
        'success': [{ type: Output },],
        'upload': [{ type: Output },],
        'uploadProgress': [{ type: Output },],
        'valueChange': [{ type: Output },],
        'dir': [{ type: HostBinding, args: ['attr.dir',] },],
        'hostDefaultClasses': [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-upload',] }, { type: HostBinding, args: ['class.k-header',] },],
        'hostDisabledClass': [{ type: HostBinding, args: ['class.k-state-disabled',] },],
        'handleKeydown': [{ type: HostListener, args: ['keydown', ['$event'],] },],
    };
    return UploadComponent;
}());
export { UploadComponent };
