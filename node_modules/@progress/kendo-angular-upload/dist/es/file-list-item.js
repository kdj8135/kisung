import { Directive, ElementRef, HostBinding, HostListener, Input } from '@angular/core';
import { FileState } from './file-info';
import { NavigationService } from './navigation.service';
import util from "./util";
/**
 * @hidden
 */
var FileListItemDirective = /** @class */ (function () {
    function FileListItemDirective(el, navigationService) {
        this.navigationService = navigationService;
        this.fileClass = true;
        this.focused = false;
        this.element = el;
    }
    FileListItemDirective.prototype.focus = function () {
        this.element.nativeElement.focus();
    };
    Object.defineProperty(FileListItemDirective.prototype, "uidAttribute", {
        get: function () {
            return this.files[0].uid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileListItemDirective.prototype, "tabIndex", {
        get: function () {
            return "-1";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileListItemDirective.prototype, "kFileError", {
        get: function () {
            return this.files[0].state === FileState.Failed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileListItemDirective.prototype, "kFileInvalid", {
        get: function () {
            return util.filesHaveValidationErrors(this.files);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileListItemDirective.prototype, "kFileProgress", {
        get: function () {
            return this.files[0].state === FileState.Uploading;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileListItemDirective.prototype, "kFileSuccess", {
        get: function () {
            return this.files[0].state === FileState.Uploaded ||
                this.files[0].state === FileState.Initial;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileListItemDirective.prototype, "kStateFocused", {
        get: function () {
            return this.focused;
        },
        enumerable: true,
        configurable: true
    });
    FileListItemDirective.prototype.onFocus = function () {
        this.focused = true;
    };
    FileListItemDirective.prototype.onBlur = function () {
        this.focused = false;
    };
    FileListItemDirective.prototype.onClick = function (event) {
        event.preventDefault();
        if (!util.isFocusable(event.target) && !util.hasClasses(event.target, util.IGNORE_TARGET_CLASSSES)) {
            this.navigationService.focusedIndex = this.index;
        }
    };
    FileListItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[kendoUploadFileListItem]'
                },] },
    ];
    /** @nocollapse */
    FileListItemDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NavigationService, },
    ]; };
    FileListItemDirective.propDecorators = {
        'files': [{ type: Input },],
        'index': [{ type: Input },],
        'fileClass': [{ type: HostBinding, args: ['class.k-file',] },],
        'uidAttribute': [{ type: HostBinding, args: ['attr.data-uid',] },],
        'tabIndex': [{ type: HostBinding, args: ['attr.tabIndex',] },],
        'kFileError': [{ type: HostBinding, args: ['class.k-file-error',] },],
        'kFileInvalid': [{ type: HostBinding, args: ['class.k-file-invalid',] },],
        'kFileProgress': [{ type: HostBinding, args: ['class.k-file-progress',] },],
        'kFileSuccess': [{ type: HostBinding, args: ['class.k-file-success',] },],
        'kStateFocused': [{ type: HostBinding, args: ['class.k-state-focused',] },],
        'onFocus': [{ type: HostListener, args: ["focus",] },],
        'onBlur': [{ type: HostListener, args: ["blur",] },],
        'onClick': [{ type: HostListener, args: ['click', ['$event'],] },],
    };
    return FileListItemDirective;
}());
export { FileListItemDirective };
