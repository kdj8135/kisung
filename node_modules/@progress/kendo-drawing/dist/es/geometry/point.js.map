{"version":3,"file":"point.js","sources":["point.js"],"sourcesContent":["import defineAccessors from '../accessors/define-accessors';\nimport ObserversMixin from '../mixins/observers-mixin';\nimport { Class } from '../common';\nimport { defined, MIN_NUM, MAX_NUM, round } from '../util';\nimport Matrix from './matrix';\nimport toMatrix from './to-matrix';\n\nclass Point extends Class {\n\n    constructor(x, y) {\n        super();\n\n        this.x = x || 0;\n        this.y = y || 0;\n    }\n\n    equals(other) {\n        return other && other.x === this.x && other.y === this.y;\n    }\n\n    clone() {\n        return new Point(this.x, this.y);\n    }\n\n    rotate(angle, origin) {\n        const originPoint = Point.create(origin) || Point.ZERO;\n\n        return this.transform(Matrix.rotate(angle, originPoint.x, originPoint.y));\n    }\n\n    translate(x, y) {\n        this.x += x;\n        this.y += y;\n\n        this.geometryChange();\n\n        return this;\n    }\n\n    translateWith(point) {\n        return this.translate(point.x, point.y);\n    }\n\n    move(x, y) {\n        this.x = this.y = 0;\n        return this.translate(x, y);\n    }\n\n    scale(scaleX, scaleY = scaleX) {\n        this.x *= scaleX;\n        this.y *= scaleY;\n\n        this.geometryChange();\n\n        return this;\n    }\n\n    scaleCopy(scaleX, scaleY) {\n        return this.clone().scale(scaleX, scaleY);\n    }\n\n    transform(transformation) {\n        const matrix = toMatrix(transformation);\n        const { x, y } = this;\n\n        this.x = matrix.a * x + matrix.c * y + matrix.e;\n        this.y = matrix.b * x + matrix.d * y + matrix.f;\n\n        this.geometryChange();\n\n        return this;\n    }\n\n    transformCopy(transformation) {\n        const point = this.clone();\n\n        if (transformation) {\n            point.transform(transformation);\n        }\n\n        return point;\n    }\n\n    distanceTo(point) {\n        const dx = this.x - point.x;\n        const dy = this.y - point.y;\n\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    round(digits) {\n        this.x = round(this.x, digits);\n        this.y = round(this.y, digits);\n\n        this.geometryChange();\n\n        return this;\n    }\n\n    toArray(digits) {\n        const doRound = defined(digits);\n        const x = doRound ? round(this.x, digits) : this.x;\n        const y = doRound ? round(this.y, digits) : this.y;\n\n        return [ x, y ];\n    }\n\n    toString(digits, separator = \" \") {\n        let { x, y } = this;\n\n        if (defined(digits)) {\n            x = round(x, digits);\n            y = round(y, digits);\n        }\n\n        return x + separator + y;\n    }\n\n    static create(arg0, arg1) {\n        if (defined(arg0)) {\n            if (arg0 instanceof Point) {\n                return arg0;\n            } else if (arguments.length === 1 && arg0.length === 2) {\n                return new Point(arg0[0], arg0[1]);\n            }\n\n            return new Point(arg0, arg1);\n        }\n    }\n\n    static min() {\n        let minX = MAX_NUM;\n        let minY = MAX_NUM;\n\n        for (let i = 0; i < arguments.length; i++) {\n            let point = arguments[i];\n            minX = Math.min(point.x, minX);\n            minY = Math.min(point.y, minY);\n        }\n\n        return new Point(minX, minY);\n    }\n\n    static max() {\n        let maxX = MIN_NUM;\n        let maxY = MIN_NUM;\n\n        for (let i = 0; i < arguments.length; i++) {\n            const point = arguments[i];\n            maxX = Math.max(point.x, maxX);\n            maxY = Math.max(point.y, maxY);\n        }\n\n        return new Point(maxX, maxY);\n    }\n\n    static minPoint() {\n        return new Point(MIN_NUM, MIN_NUM);\n    }\n\n    static maxPoint() {\n        return new Point(MAX_NUM, MAX_NUM);\n    }\n\n    static get ZERO() {\n        return new Point(0, 0);\n    }\n}\n\ndefineAccessors(Point.prototype, [ \"x\", \"y\" ]);\nObserversMixin.extend(Point.prototype);\n\nexport default Point;\n"],"names":["super","const","let","arguments"],"mappings":"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"}