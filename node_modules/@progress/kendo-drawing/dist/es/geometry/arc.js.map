{"version":3,"file":"arc.js","sources":["arc.js"],"sourcesContent":["import defineAccessors from '../accessors/define-accessors';\nimport ObserversMixin from '../mixins/observers-mixin';\nimport { Class } from '../common';\nimport { deg, rad, round } from '../util';\n\nimport closeOrLess from './math/close-or-less';\nimport lineIntersection from './math/line-intersection';\nimport ellipseExtremeAngles from './math/ellipse-extreme-angles';\n\nimport { PRECISION } from './constants';\nimport Point from './point';\nimport Rect from './rect';\nimport transform from './transform';\n\nconst MAX_INTERVAL = 45;\nconst pow = Math.pow;\n\nclass Arc extends Class {\n\n    constructor(center = new Point(), options = {}) {\n        super();\n\n        this.setCenter(center);\n\n        this.radiusX = options.radiusX;\n        this.radiusY = options.radiusY || options.radiusX;\n        this.startAngle = options.startAngle;\n        this.endAngle = options.endAngle;\n        this.anticlockwise = options.anticlockwise || false;\n        this.xRotation = options.xRotation;\n    }\n\n    clone() {\n        return new Arc(this.center, {\n            radiusX: this.radiusX,\n            radiusY: this.radiusY,\n            startAngle: this.startAngle,\n            endAngle: this.endAngle,\n            anticlockwise: this.anticlockwise\n        });\n    }\n\n    setCenter(value) {\n        this._observerField(\"center\", Point.create(value));\n        this.geometryChange();\n        return this;\n    }\n\n    getCenter() {\n        return this.center;\n    }\n\n    pointAt(angle) {\n        const center = this.center;\n        const radian = rad(angle);\n\n        return new Point(\n            center.x + this.radiusX * Math.cos(radian),\n            center.y + this.radiusY * Math.sin(radian)\n        );\n    }\n\n    curvePoints() {\n        const startAngle = this.startAngle;\n        const dir = this.anticlockwise ? -1 : 1;\n        const curvePoints = [ this.pointAt(startAngle) ];\n        const interval = this._arcInterval();\n        const intervalAngle = interval.endAngle - interval.startAngle;\n        const subIntervalsCount = Math.ceil(intervalAngle / MAX_INTERVAL);\n        const subIntervalAngle = intervalAngle / subIntervalsCount;\n        let currentAngle = startAngle;\n        let transformation;\n        if (this.xRotation) {\n            transformation = transform().rotate(this.xRotation, this.center);\n        }\n\n        for (let i = 1; i <= subIntervalsCount; i++) {\n            const nextAngle = currentAngle + dir * subIntervalAngle;\n            const points = this._intervalCurvePoints(currentAngle, nextAngle, transformation);\n\n            curvePoints.push(points.cp1, points.cp2, points.p2);\n            currentAngle = nextAngle;\n        }\n\n        return curvePoints;\n    }\n\n    bbox(matrix) {\n        const interval = this._arcInterval();\n        const startAngle = interval.startAngle;\n        const endAngle = interval.endAngle;\n        const extremeAngles = ellipseExtremeAngles(this.center, this.radiusX, this.radiusY, matrix);\n        const extremeX = deg(extremeAngles.x);\n        const extremeY = deg(extremeAngles.y);\n        const endPoint = this.pointAt(endAngle).transformCopy(matrix);\n        let currentAngleX = bboxStartAngle(extremeX, startAngle);\n        let currentAngleY = bboxStartAngle(extremeY, startAngle);\n        let currentPoint = this.pointAt(startAngle).transformCopy(matrix);\n        let minPoint = Point.min(currentPoint, endPoint);\n        let maxPoint = Point.max(currentPoint, endPoint);\n\n        while (currentAngleX < endAngle || currentAngleY < endAngle) {\n            let currentPointX;\n            if (currentAngleX < endAngle) {\n                currentPointX = this.pointAt(currentAngleX).transformCopy(matrix);\n                currentAngleX += 90;\n            }\n\n            let currentPointY;\n            if (currentAngleY < endAngle) {\n                currentPointY = this.pointAt(currentAngleY).transformCopy(matrix);\n                currentAngleY += 90;\n            }\n\n            currentPoint = new Point(currentPointX.x, currentPointY.y);\n            minPoint = Point.min(minPoint, currentPoint);\n            maxPoint = Point.max(maxPoint, currentPoint);\n        }\n\n        return Rect.fromPoints(minPoint, maxPoint);\n    }\n\n    _arcInterval() {\n        let { startAngle, endAngle, anticlockwise } = this;\n\n        if (anticlockwise) {\n            let oldStart = startAngle;\n            startAngle = endAngle;\n            endAngle = oldStart;\n        }\n\n        if (startAngle > endAngle || (anticlockwise && startAngle === endAngle)) {\n            endAngle += 360;\n        }\n\n        return {\n            startAngle: startAngle,\n            endAngle: endAngle\n        };\n    }\n\n    _intervalCurvePoints(startAngle, endAngle, transformation) {\n        const p1 = this.pointAt(startAngle);\n        const p2 = this.pointAt(endAngle);\n        const p1Derivative = this._derivativeAt(startAngle);\n        const p2Derivative = this._derivativeAt(endAngle);\n        const t = (rad(endAngle) - rad(startAngle)) / 3;\n        const cp1 = new Point(p1.x + t * p1Derivative.x, p1.y + t * p1Derivative.y);\n        const cp2 = new Point(p2.x - t * p2Derivative.x, p2.y - t * p2Derivative.y);\n        if (transformation) {\n            p1.transform(transformation);\n            p2.transform(transformation);\n            cp1.transform(transformation);\n            cp2.transform(transformation);\n        }\n\n        return {\n            p1: p1,\n            cp1: cp1,\n            cp2: cp2,\n            p2: p2\n        };\n    }\n\n    _derivativeAt(angle) {\n        const radian = rad(angle);\n\n        return new Point(-this.radiusX * Math.sin(radian), this.radiusY * Math.cos(radian));\n    }\n\n    containsPoint(point) {\n        const interval = this._arcInterval();\n        const intervalAngle = interval.endAngle - interval.startAngle;\n        const { center, radiusX, radiusY } = this;\n        const distance = center.distanceTo(point);\n        const angleRad = Math.atan2(point.y - center.y, point.x - center.x);\n        const pointRadius = (radiusX * radiusY) /\n            Math.sqrt(pow(radiusX, 2) * pow(Math.sin(angleRad), 2) + pow(radiusY, 2) * pow(Math.cos(angleRad), 2));\n        const startPoint = this.pointAt(this.startAngle).round(PRECISION);\n        const endPoint = this.pointAt(this.endAngle).round(PRECISION);\n        const intersection = lineIntersection(center, point.round(PRECISION), startPoint, endPoint);\n        let containsPoint;\n\n        if (intervalAngle < 180) {\n            containsPoint = intersection && closeOrLess(center.distanceTo(intersection), distance) && closeOrLess(distance, pointRadius);\n        } else {\n            let angle = calculateAngle(center.x, center.y, radiusX, radiusY, point.x, point.y);\n            if (angle !== 360) {\n                angle = (360 + angle) % 360;\n            }\n\n            let inAngleRange = interval.startAngle <= angle && angle <= interval.endAngle;\n            containsPoint = (inAngleRange && closeOrLess(distance, pointRadius)) || (!inAngleRange && (!intersection || intersection.equals(point)));\n        }\n        return containsPoint;\n    }\n\n    _isOnPath(point, width) {\n        const interval = this._arcInterval();\n        const center = this.center;\n        let angle = calculateAngle(center.x, center.y, this.radiusX, this.radiusY, point.x, point.y);\n        if (angle !== 360) {\n            angle = (360 + angle) % 360;\n        }\n\n        const inAngleRange = interval.startAngle <= angle && angle <= interval.endAngle;\n\n        return inAngleRange && this.pointAt(angle).distanceTo(point) <= width;\n    }\n\n    static fromPoints(start, end, rx, ry, largeArc, swipe, rotation) {// eslint-disable-line max-params\n        const arcParameters = normalizeArcParameters({\n            x1: start.x,\n            y1: start.y,\n            x2: end.x,\n            y2: end.y,\n            rx: rx,\n            ry: ry,\n            largeArc: largeArc,\n            swipe: swipe,\n            rotation: rotation\n        });\n\n        return new Arc(arcParameters.center, {\n            startAngle: arcParameters.startAngle,\n            endAngle: arcParameters.endAngle,\n            radiusX: arcParameters.radiusX,\n            radiusY: arcParameters.radiusY,\n            xRotation: arcParameters.xRotation,\n            anticlockwise: swipe === 0\n        });\n    }\n}\n\ndefineAccessors(Arc.prototype, [ \"radiusX\", \"radiusY\", \"startAngle\", \"endAngle\", \"anticlockwise\" ]);\nObserversMixin.extend(Arc.prototype);\n\nfunction calculateAngle(cx, cy, rx, ry, x, y) {\n    const cos = round((x - cx) / rx, 3);\n    const sin = round((y - cy) / ry, 3);\n\n    return round(deg(Math.atan2(sin, cos)));\n}\n\nfunction normalizeArcParameters(parameters) {\n    let { x1, y1, x2, y2, rx, ry, largeArc, swipe, rotation = 0 } = parameters;\n\n    const radians = rad(rotation);\n    const cosine = Math.cos(radians);\n    const sine = Math.sin(radians);\n\n    const xT = cosine * (x1 - x2) / 2 + sine * (y1 - y2) / 2;\n    const yT = -sine * (x1 - x2) / 2 + cosine * (y1 - y2) / 2;\n\n    const sign = largeArc !== swipe ? 1 : -1;\n\n    const xt2 = Math.pow(xT, 2);\n    const yt2 = Math.pow(yT, 2);\n    let rx2 = Math.pow(rx, 2);\n    let ry2 = Math.pow(ry, 2);\n\n    let delta = xt2 / rx2 + yt2 / ry2;\n\n    if (delta > 1) {\n        delta = Math.sqrt(xt2 / rx2 + yt2 / ry2);\n        rx = delta * rx;\n        rx2 = Math.pow(rx, 2);\n\n        ry = delta * ry;\n        ry2 = Math.pow(ry, 2);\n    }\n\n    let constT = sign * Math.sqrt((rx2 * ry2 - rx2 * yt2 - ry2 * xt2) / (rx2 * yt2 + ry2 * xt2));\n    // due to rounding errors the value could become NaN even after radii correction\n    if (isNaN(constT)) {\n        constT = 0;\n    }\n\n    const cxT = constT * (rx * yT) / ry;\n    const cyT = - constT * (ry * xT) / rx;\n\n    const cx = cosine * cxT - sine * cyT + (x1 + x2) / 2;\n    const cy = sine * cxT + cosine * cyT + (y1 + y2) / 2;\n\n\n    const uX = (xT - cxT) / rx;\n    const uY = (yT - cyT) / ry;\n    const vX = -(xT + cxT) / rx;\n    const vY = -(yT + cyT) / ry;\n\n    const startAngle = (uY >= 0 ? 1 : -1) * deg(Math.acos(uX / Math.sqrt(uX * uX + uY * uY)));\n\n    const angleCosine = round((uX * vX + uY * vY) / (Math.sqrt(uX * uX + uY * uY) * Math.sqrt(vX * vX + vY * vY)), 10);\n    let angle = (uX * vY - uY * vX >= 0 ? 1 : -1) * deg(Math.acos(angleCosine));\n\n    if (!swipe && angle > 0) {\n        angle -= 360;\n    }\n\n    if (swipe && angle < 0) {\n        angle += 360;\n    }\n    let endAngle = startAngle + angle;\n    const signEndAngle = endAngle >= 0 ? 1 : -1;\n    endAngle = (Math.abs(endAngle) % 360) * signEndAngle;\n\n    return {\n        center: new Point(cx, cy),\n        startAngle: startAngle,\n        endAngle: endAngle,\n        radiusX: rx,\n        radiusY: ry,\n        xRotation: rotation\n    };\n}\n\nfunction bboxStartAngle(angle, start) {\n    let startAngle = angle;\n\n    while (startAngle < start) {\n        startAngle += 90;\n    }\n\n    return startAngle;\n}\n\nexport default Arc;\n"],"names":["const","super","let","this"],"mappings":"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"}