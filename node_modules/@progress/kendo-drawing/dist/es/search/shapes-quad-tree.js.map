{"version":3,"file":"shapes-quad-tree.js","sources":["shapes-quad-tree.js"],"sourcesContent":["import QuadRoot from './quad-root';\nimport QuadNode from './quad-node';\nimport { Rect } from '../geometry';\nimport { Class } from '../common';\nimport { append } from '../util';\n\nconst ROOT_SIZE = 3000;\nconst LEVEL_STEP = 10000;\nconst MAX_LEVEL = 75;\n\nclass ShapesQuadTree extends Class {\n\n    constructor() {\n        super();\n\n        this.initRoots();\n    }\n\n    initRoots() {\n        this.rootMap = {};\n        this.root = new QuadRoot();\n        this.rootElements = [];\n    }\n\n    clear() {\n        const rootElements = this.rootElements;\n        for (let idx = 0; idx < rootElements.length; idx++) {\n            this.remove(rootElements[idx]);\n        }\n        this.initRoots();\n    }\n\n    pointShape(point) {\n        const sectorRoot = ( this.rootMap[ Math.floor( point.x / ROOT_SIZE ) ] || {} )[ Math.floor( point.y / ROOT_SIZE ) ];\n        let result = this.root.pointShapes(point);\n\n        if (sectorRoot) {\n            result = result.concat(sectorRoot.pointShapes(point));\n        }\n\n        this.assignZindex(result);\n\n        result.sort(zIndexComparer);\n        for (let idx = 0; idx < result.length; idx++) {\n            if (result[idx].containsPoint(point)) {\n                return result[idx];\n            }\n        }\n    }\n\n    assignZindex(elements) {\n        for (let idx = 0; idx < elements.length; idx++) {\n            let element = elements[idx];\n            let zIndex = 0;\n            let levelWeight = Math.pow(LEVEL_STEP, MAX_LEVEL);\n            let parents = [];\n\n            while (element) {\n                parents.push(element);\n                element = element.parent;\n            }\n\n            while (parents.length) {\n                element = parents.pop();\n                zIndex += ((element.parent ? element.parent.children : this.rootElements).indexOf(element) + 1) * levelWeight;\n                levelWeight /= LEVEL_STEP;\n            }\n\n            elements[idx]._zIndex = zIndex;\n        }\n    }\n\n    optionsChange(e) {\n        if (e.field === \"transform\" || e.field === \"stroke.width\") {\n            this.bboxChange(e.element);\n        }\n    }\n\n    geometryChange(e) {\n        this.bboxChange(e.element);\n    }\n\n    bboxChange(element) {\n        if (element.nodeType === \"Group\") {\n            for (let idx = 0; idx < element.children.length; idx++) {\n                this.bboxChange(element.children[idx]);\n            }\n        } else {\n            if (element._quadNode) {\n                element._quadNode.remove(element);\n            }\n            this._insertShape(element);\n        }\n    }\n\n    add(elements) {\n        const elementsArray = Array.isArray(elements) ? elements.slice(0) : [ elements ];\n\n        append(this.rootElements, elementsArray);\n        this._insert(elementsArray);\n    }\n\n    childrenChange(e) {\n        if (e.action === \"remove\") {\n            for (let idx = 0; idx < e.items.length; idx++) {\n                this.remove(e.items[idx]);\n            }\n        } else {\n            this._insert(Array.prototype.slice.call(e.items, 0));\n        }\n    }\n\n    _insert(elements) {\n        let element;\n\n        while (elements.length > 0) {\n            element = elements.pop();\n            element.addObserver(this);\n            if (element.nodeType === \"Group\") {\n                append(elements, element.children);\n            } else {\n                this._insertShape(element);\n            }\n        }\n    }\n\n    _insertShape(shape) {\n        const bbox = shape.bbox();\n        if (bbox) {\n            const sectors = this.getSectors(bbox);\n            const x = sectors[0][0];\n            const y = sectors[1][0];\n\n            if (this.inRoot(sectors)) {\n                this.root.insert(shape, bbox);\n            } else {\n                const rootMap = this.rootMap;\n                if (!rootMap[x]) {\n                    rootMap[x] = {};\n                }\n\n                if (!rootMap[x][y]) {\n                    rootMap[x][y] = new QuadNode(\n                        new Rect([ x * ROOT_SIZE, y * ROOT_SIZE ], [ ROOT_SIZE, ROOT_SIZE ])\n                    );\n                }\n\n                rootMap[x][y].insert(shape, bbox);\n            }\n        }\n    }\n\n    remove(element) {\n        element.removeObserver(this);\n\n        if (element.nodeType === \"Group\") {\n            const children = element.children;\n            for (let idx = 0; idx < children.length; idx++) {\n                this.remove(children[idx]);\n            }\n        } else if (element._quadNode) {\n            element._quadNode.remove(element);\n            delete element._quadNode;\n        }\n    }\n\n    inRoot(sectors) {\n        return sectors[0].length > 1 || sectors[1].length > 1;\n    }\n\n    getSectors(rect) {\n        const bottomRight = rect.bottomRight();\n        const bottomX = Math.floor(bottomRight.x / ROOT_SIZE);\n        const bottomY = Math.floor(bottomRight.y / ROOT_SIZE);\n        const sectors = [ [], [] ];\n        for (let x = Math.floor(rect.origin.x / ROOT_SIZE); x <= bottomX; x++) {\n            sectors[0].push(x);\n        }\n        for (let y = Math.floor(rect.origin.y / ROOT_SIZE); y <= bottomY; y++) {\n            sectors[1].push(y);\n        }\n        return sectors;\n    }\n}\n\nfunction zIndexComparer(x1, x2) {\n    if (x1._zIndex < x2._zIndex) {\n        return 1;\n    }\n    if (x1._zIndex > x2._zIndex) {\n        return -1;\n    }\n\n    return 0;\n}\n\nexport default ShapesQuadTree;"],"names":["const","super","let","this"],"mappings":"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"}