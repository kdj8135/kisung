{"version":3,"file":"path-node.js","sources":["path-node.js"],"sourcesContent":["import Node from './node';\nimport { defined, isTransparent } from '../util';\nimport { DASH_ARRAYS, SOLID, BUTT } from '../core/constants';\nimport { NONE } from './constants';\nimport renderAllAttr from './utils/render-all-attributes';\nimport renderAttr from './utils/render-attribute';\nimport NODE_MAP from './node-map';\n\nconst ATTRIBUTE_MAP = {\n    \"fill.opacity\": \"fill-opacity\",\n    \"stroke.color\": \"stroke\",\n    \"stroke.width\": \"stroke-width\",\n    \"stroke.opacity\": \"stroke-opacity\"\n};\nconst SPACE = \" \";\n\nclass PathNode extends Node {\n\n    geometryChange() {\n        this.attr(\"d\", this.renderData());\n        this.invalidate();\n    }\n\n    optionsChange(e) {\n        switch (e.field) {\n            case \"fill\":\n                if (e.value) {\n                    this.allAttr(this.mapFill(e.value));\n                } else {\n                    this.removeAttr(\"fill\");\n                }\n                break;\n\n            case \"fill.color\":\n                this.allAttr(this.mapFill({ color: e.value }));\n                break;\n\n            case \"stroke\":\n                if (e.value) {\n                    this.allAttr(this.mapStroke(e.value));\n                } else {\n                    this.removeAttr(\"stroke\");\n                }\n                break;\n\n            case \"transform\":\n                this.transformChange(e.value);\n                break;\n\n            default:\n                const name = ATTRIBUTE_MAP[e.field];\n                if (name) {\n                    this.attr(name, e.value);\n                }\n                break;\n        }\n\n        super.optionsChange(e);\n    }\n\n    content() {\n        if (this.element) {\n            this.element.textContent = this.srcElement.content();\n        }\n    }\n\n    renderData() {\n        return this.printPath(this.srcElement);\n    }\n\n    printPath(path) {\n        const segments = path.segments;\n        const length = segments.length;\n        if (length > 0) {\n            const parts = [];\n            let output, currentType;\n\n            for (let i = 1; i < length; i++) {\n                let segmentType = this.segmentType(segments[i - 1], segments[i]);\n                if (segmentType !== currentType) {\n                    currentType = segmentType;\n                    parts.push(segmentType);\n                }\n\n                if (segmentType === \"L\") {\n                    parts.push(this.printPoints(segments[i].anchor()));\n                } else {\n                    parts.push(this.printPoints(segments[i - 1].controlOut(), segments[i].controlIn(), segments[i].anchor()));\n                }\n            }\n\n            output = \"M\" + this.printPoints(segments[0].anchor()) + SPACE + parts.join(SPACE);\n            if (path.options.closed) {\n                output += \"Z\";\n            }\n\n            return output;\n        }\n    }\n\n    printPoints() {\n        const points = arguments;\n        const length = points.length;\n        const result = [];\n\n        for (let i = 0; i < length; i++) {\n            result.push(points[i].toString(3));\n        }\n\n        return result.join(\" \");\n    }\n\n    segmentType(segmentStart, segmentEnd) {\n        return segmentStart.controlOut() && segmentEnd.controlIn() ? \"C\" : \"L\";\n    }\n\n    mapStroke(stroke) {\n        const attrs = [];\n\n        if (stroke && !isTransparent(stroke.color)) {\n            attrs.push([ \"stroke\", stroke.color ]);\n            attrs.push([ \"stroke-width\", stroke.width ]);\n            attrs.push([ \"stroke-linecap\", this.renderLinecap(stroke) ]);\n            attrs.push([ \"stroke-linejoin\", stroke.lineJoin ]);\n\n            if (defined(stroke.opacity)) {\n                attrs.push([ \"stroke-opacity\", stroke.opacity ]);\n            }\n\n            if (defined(stroke.dashType)) {\n                attrs.push([ \"stroke-dasharray\", this.renderDashType(stroke) ]);\n            }\n        } else {\n            attrs.push([ \"stroke\", NONE ]);\n        }\n\n        return attrs;\n    }\n\n    renderStroke() {\n        return renderAllAttr(\n            this.mapStroke(this.srcElement.options.stroke)\n        );\n    }\n\n    renderDashType(stroke) {\n        const { dashType, width = 1 } = stroke;\n\n        if (dashType && dashType !== SOLID) {\n            const dashArray = DASH_ARRAYS[dashType.toLowerCase()];\n            const result = [];\n\n            for (let i = 0; i < dashArray.length; i++) {\n                result.push(dashArray[i] * width);\n            }\n\n            return result.join(\" \");\n        }\n    }\n\n    renderLinecap(stroke) {\n        const { dashType, lineCap } = stroke;\n\n        return (dashType && dashType !== \"solid\") ? BUTT : lineCap;\n    }\n\n    mapFill(fill) {\n        const attrs = [];\n        if (!(fill && fill.nodeType === \"Gradient\")) {\n            if (fill && !isTransparent(fill.color)) {\n                attrs.push([ \"fill\", fill.color ]);\n\n                if (defined(fill.opacity)) {\n                    attrs.push([ \"fill-opacity\", fill.opacity ]);\n                }\n            } else {\n                attrs.push([ \"fill\", NONE ]);\n            }\n        }\n\n        return attrs;\n    }\n\n    renderFill() {\n        return renderAllAttr(\n            this.mapFill(this.srcElement.options.fill)\n        );\n    }\n\n    template() {\n        return `<path ${ this.renderId() } ${ this.renderStyle() } ${ this.renderOpacity() } ${ renderAttr('d', this.renderData()) }` +\n                    `${ this.renderStroke() }${ this.renderFill() }${ this.renderDefinitions() }${ this.renderTransform() }></path>`;\n    }\n}\n\nNODE_MAP.Path = PathNode;\n\nexport default PathNode;"],"names":["const","super","let","this"],"mappings":"AAAA,OAAO,IAAI,MAAM,QAAQ,CAAC;AAC1B,SAAS,OAAO,EAAE,aAAa,QAAQ,SAAS,CAAC;AACjD,SAAS,WAAW,EAAE,KAAK,EAAE,IAAI,QAAQ,mBAAmB,CAAC;AAC7D,SAAS,IAAI,QAAQ,aAAa,CAAC;AACnC,OAAO,aAAa,MAAM,+BAA+B,CAAC;AAC1D,OAAO,UAAU,MAAM,0BAA0B,CAAC;AAClD,OAAO,QAAQ,MAAM,YAAY,CAAC;;AAElCA,GAAK,CAAC,aAAa,GAAG;IAClB,cAAc,EAAE,cAAc;IAC9B,cAAc,EAAE,QAAQ;IACxB,cAAc,EAAE,cAAc;IAC9B,gBAAgB,EAAE,gBAAgB;CACrC,CAAC;AACFA,GAAK,CAAC,KAAK,GAAG,GAAG,CAAC;;AAElB,IAAM,QAAQ,GAAa;IAAC;;;;;;;;IAAA,AAExB,mBAAA,cAAc,2BAAA,GAAG;QACb,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;QAClC,IAAI,CAAC,UAAU,EAAE,CAAC;KACrB,CAAA;;IAED,mBAAA,aAAa,0BAAA,CAAC,CAAC,EAAE;QACb,QAAQ,CAAC,CAAC,KAAK;YACX,KAAK,MAAM;gBACP,IAAI,CAAC,CAAC,KAAK,EAAE;oBACT,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;iBACvC,MAAM;oBACH,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;iBAC3B;gBACD,MAAM;;YAEV,KAAK,YAAY;gBACb,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC/C,MAAM;;YAEV,KAAK,QAAQ;gBACT,IAAI,CAAC,CAAC,KAAK,EAAE;oBACT,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;iBACzC,MAAM;oBACH,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;iBAC7B;gBACD,MAAM;;YAEV,KAAK,WAAW;gBACZ,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;gBAC9B,MAAM;;YAEV;gBACIA,GAAK,CAAC,IAAI,GAAG,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;gBACpC,IAAI,IAAI,EAAE;oBACN,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;iBAC5B;gBACD,MAAM;SACb;;QAEDC,cAAK,CAAC,aAAa,KAAA,CAAC,MAAA,CAAC,CAAC,CAAC;KAC1B,CAAA;;IAED,mBAAA,OAAO,oBAAA,GAAG;QACN,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;SACxD;KACJ,CAAA;;IAED,mBAAA,UAAU,uBAAA,GAAG;QACT,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KAC1C,CAAA;;IAED,mBAAA,SAAS,sBAAA,CAAC,IAAI,EAAE,CAAC;;AAAA;QACbD,GAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC/BA,GAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;QAC/B,IAAI,MAAM,GAAG,CAAC,EAAE;YACZA,GAAK,CAAC,KAAK,GAAG,EAAE,CAAC;YACjBE,GAAG,CAAC,MAAM,EAAE,WAAW,CAAC;;YAExB,KAAKA,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC7BA,GAAG,CAAC,WAAW,GAAGC,MAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjE,IAAI,WAAW,KAAK,WAAW,EAAE;oBAC7B,WAAW,GAAG,WAAW,CAAC;oBAC1B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;iBAC3B;;gBAED,IAAI,WAAW,KAAK,GAAG,EAAE;oBACrB,KAAK,CAAC,IAAI,CAACA,MAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;iBACtD,MAAM;oBACH,KAAK,CAAC,IAAI,CAACA,MAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;iBAC7G;aACJ;;YAED,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAClF,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;gBACrB,MAAM,IAAI,GAAG,CAAC;aACjB;;YAED,OAAO,MAAM,CAAC;SACjB;KACJ,CAAA;;IAED,mBAAA,WAAW,wBAAA,GAAG;QACVH,GAAK,CAAC,MAAM,GAAG,SAAS,CAAC;QACzBA,GAAK,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC7BA,GAAK,CAAC,MAAM,GAAG,EAAE,CAAC;;QAElB,KAAKE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;SACtC;;QAED,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC3B,CAAA;;IAED,mBAAA,WAAW,wBAAA,CAAC,YAAY,EAAE,UAAU,EAAE;QAClC,OAAO,YAAY,CAAC,UAAU,EAAE,IAAI,UAAU,CAAC,SAAS,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC;KAC1E,CAAA;;IAED,mBAAA,SAAS,sBAAA,CAAC,MAAM,EAAE;QACdF,GAAK,CAAC,KAAK,GAAG,EAAE,CAAC;;QAEjB,IAAI,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YACxC,KAAK,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;YACvC,KAAK,CAAC,IAAI,CAAC,EAAE,cAAc,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;YAC7C,KAAK,CAAC,IAAI,CAAC,EAAE,gBAAgB,EAAE,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAC7D,KAAK,CAAC,IAAI,CAAC,EAAE,iBAAiB,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;;YAEnD,IAAI,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;gBACzB,KAAK,CAAC,IAAI,CAAC,EAAE,gBAAgB,EAAE,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;aACpD;;YAED,IAAI,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;gBAC1B,KAAK,CAAC,IAAI,CAAC,EAAE,kBAAkB,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;aACnE;SACJ,MAAM;YACH,KAAK,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;SAClC;;QAED,OAAO,KAAK,CAAC;KAChB,CAAA;;IAED,mBAAA,YAAY,yBAAA,GAAG;QACX,OAAO,aAAa;YAChB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC;SACjD,CAAC;KACL,CAAA;;IAED,mBAAA,cAAc,2BAAA,CAAC,MAAM,EAAE;QACnB,AAAK,AAAG,IAAA,QAAQ;QAAU,0DAAA,CAAC,CAArB,AAAU,AAAW,AAAE,AAAS,AAAC;;QAEvC,IAAI,QAAQ,IAAI,QAAQ,KAAK,KAAK,EAAE;YAChCA,GAAK,CAAC,SAAS,GAAG,WAAW,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;YACtDA,GAAK,CAAC,MAAM,GAAG,EAAE,CAAC;;YAElB,KAAKE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;aACrC;;YAED,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAC3B;KACJ,CAAA;;IAED,mBAAA,aAAa,0BAAA,CAAC,MAAM,EAAE;QAClB,AAAK,AAAG,IAAA,QAAQ;QAAE,IAAA,OAAO,kBAAnB,AAAU,AAAS,AAAE,AAAS,AAAC;;QAErC,OAAO,CAAC,QAAQ,IAAI,QAAQ,KAAK,OAAO,CAAC,GAAG,IAAI,GAAG,OAAO,CAAC;KAC9D,CAAA;;IAED,mBAAA,OAAO,oBAAA,CAAC,IAAI,EAAE;QACVF,GAAK,CAAC,KAAK,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,UAAU,CAAC,EAAE;YACzC,IAAI,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBACpC,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;;gBAEnC,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;oBACvB,KAAK,CAAC,IAAI,CAAC,EAAE,cAAc,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;iBAChD;aACJ,MAAM;gBACH,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;aAChC;SACJ;;QAED,OAAO,KAAK,CAAC;KAChB,CAAA;;IAED,mBAAA,UAAU,uBAAA,GAAG;QACT,OAAO,aAAa;YAChB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC;SAC7C,CAAC;KACL,CAAA;;IAED,mBAAA,QAAQ,qBAAA,GAAG;QACP,OAAO,QAAO,IAAG,IAAI,CAAC,QAAQ,EAAE,CAAA,MAAG,IAAG,IAAI,CAAC,WAAW,EAAE,CAAA,MAAG,IAAG,IAAI,CAAC,aAAa,EAAE,CAAA,MAAG,IAAG,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAA,AAAG;oBACjH,EAAC,IAAG,IAAI,CAAC,YAAY,EAAE,CAAA,IAAK,IAAI,CAAC,UAAU,EAAE,CAAA,IAAK,IAAI,CAAC,iBAAiB,EAAE,CAAA,IAAK,IAAI,CAAC,eAAe,EAAE,CAAA,aAAU,AAAC,CAAC;KAChI,CAAA,AACJ;;;EAjLsB,IAiLtB,GAAA;;AAED,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC;;AAEzB,eAAe,QAAQ"}