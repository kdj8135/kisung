{"version":3,"file":"path.js","sources":["path.js"],"sourcesContent":["import GeometryElementsArray from './geometry-elements-array';\nimport Element from './element';\nimport Paintable from '../mixins/paintable';\nimport Measurable from '../mixins/measurable';\nimport Arc from '../geometry/arc';\nimport Rect from '../geometry/rect';\nimport Segment from '../geometry/segment';\nimport Point from '../geometry/point';\nimport Size from '../geometry/size';\nimport lineIntersectionsCount from '../geometry/math/line-intersections-count';\nimport { defined, last, rad } from '../util';\n\nclass Path extends Element {\n\n    constructor(options) {\n        super(options);\n        this.segments = new GeometryElementsArray();\n        this.segments.addObserver(this);\n\n        if (!defined(this.options.stroke)) {\n            this.stroke(\"#000\");\n\n            if (!defined(this.options.stroke.lineJoin)) {\n                this.options.set(\"stroke.lineJoin\", \"miter\");\n            }\n        }\n    }\n\n    moveTo(x, y) {\n        this.suspend();\n        this.segments.elements([]);\n        this.resume();\n\n        this.lineTo(x, y);\n\n        return this;\n    }\n\n    lineTo(x, y) {\n        const point = defined(y) ? new Point(x, y) : x;\n        const segment = new Segment(point);\n\n        this.segments.push(segment);\n\n        return this;\n    }\n\n    curveTo(controlOut, controlIn, point) {\n        if (this.segments.length > 0) {\n            const lastSegment = last(this.segments);\n            const segment = new Segment(point, controlIn);\n            this.suspend();\n            lastSegment.controlOut(controlOut);\n            this.resume();\n\n            this.segments.push(segment);\n        }\n\n        return this;\n    }\n\n    arc(startAngle, endAngle, radiusX, radiusY, anticlockwise) {\n        if (this.segments.length > 0) {\n            const lastSegment = last(this.segments);\n            const anchor = lastSegment.anchor();\n            const start = rad(startAngle);\n            const center = new Point(anchor.x - radiusX * Math.cos(start),\n                anchor.y - radiusY * Math.sin(start));\n            const arc = new Arc(center, {\n                startAngle: startAngle,\n                endAngle: endAngle,\n                radiusX: radiusX,\n                radiusY: radiusY,\n                anticlockwise: anticlockwise\n            });\n\n            this._addArcSegments(arc);\n        }\n\n        return this;\n    }\n\n    arcTo(end, rx, ry, largeArc, swipe, rotation) {\n        if (this.segments.length > 0) {\n            const lastSegment = last(this.segments);\n            const anchor = lastSegment.anchor();\n            const arc = Arc.fromPoints(anchor, end, rx, ry, largeArc, swipe, rotation);\n\n            this._addArcSegments(arc);\n        }\n        return this;\n    }\n\n    _addArcSegments(arc) {\n        this.suspend();\n\n        const curvePoints = arc.curvePoints();\n\n        for (let i = 1; i < curvePoints.length; i += 3) {\n            this.curveTo(curvePoints[i], curvePoints[i + 1], curvePoints[i + 2]);\n        }\n\n        this.resume();\n        this.geometryChange();\n    }\n\n    close() {\n        this.options.closed = true;\n        this.geometryChange();\n\n        return this;\n    }\n\n    rawBBox() {\n        return this._bbox();\n    }\n\n    _containsPoint(point) {\n        const segments = this.segments;\n        const length = segments.length;\n        let intersectionsCount = 0;\n        let previous, current;\n\n        for (let idx = 1; idx < length; idx++) {\n            previous = segments[idx - 1];\n            current = segments[idx];\n            intersectionsCount += previous._intersectionsTo(current, point);\n        }\n\n        if (this.options.closed || !segments[0].anchor().equals(segments[length - 1].anchor())) {\n            intersectionsCount += lineIntersectionsCount(segments[0].anchor(), segments[length - 1].anchor(), point);\n        }\n\n        return intersectionsCount % 2 !== 0;\n    }\n\n    _isOnPath(point, width) {\n        const segments = this.segments;\n        const length = segments.length;\n        const pathWidth = width || this.options.stroke.width;\n\n        if (length > 1) {\n            if (segments[0]._isOnPathTo(segments[1], point, pathWidth, \"start\")) {\n                return true;\n            }\n\n            for (let idx = 2; idx <= length - 2; idx++) {\n                if (segments[idx - 1]._isOnPathTo(segments[idx], point, pathWidth)) {\n                    return true;\n                }\n            }\n\n            if (segments[length - 2]._isOnPathTo(segments[length - 1], point, pathWidth, \"end\")) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    _bbox(matrix) {\n        const segments = this.segments;\n        const length = segments.length;\n        let boundingBox;\n\n        if (length === 1) {\n            let anchor = segments[0].anchor().transformCopy(matrix);\n            boundingBox = new Rect(anchor, Size.ZERO);\n        } else if (length > 0) {\n            for (let i = 1; i < length; i++) {\n                let segmentBox = segments[i - 1].bboxTo(segments[i], matrix);\n                if (boundingBox) {\n                    boundingBox = Rect.union(boundingBox, segmentBox);\n                } else {\n                    boundingBox = segmentBox;\n                }\n            }\n        }\n\n        return boundingBox;\n    }\n\n    static fromRect(rect, options) {\n        return new Path(options)\n            .moveTo(rect.topLeft())\n            .lineTo(rect.topRight())\n            .lineTo(rect.bottomRight())\n            .lineTo(rect.bottomLeft())\n            .close();\n    }\n\n    static fromPoints(points, options) {\n        if (points) {\n            const path = new Path(options);\n\n            for (let i = 0; i < points.length; i++) {\n                let point = Point.create(points[i]);\n                if (point) {\n                    if (i === 0) {\n                        path.moveTo(point);\n                    } else {\n                        path.lineTo(point);\n                    }\n                }\n            }\n\n            return path;\n        }\n    }\n\n    static fromArc(arc, options) {\n        const path = new Path(options);\n        const startAngle = arc.startAngle;\n        const start = arc.pointAt(startAngle);\n        path.moveTo(start.x, start.y);\n        path.arc(startAngle, arc.endAngle, arc.radiusX, arc.radiusY, arc.anticlockwise);\n        return path;\n    }\n}\n\nPath.prototype.nodeType = \"Path\";\n\nPaintable.extend(Path.prototype);\nMeasurable.extend(Path.prototype);\n\nexport default Path;"],"names":["super","const","let","this"],"mappings":"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"}