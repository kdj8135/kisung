import { Directive, HostListener, HostBinding, Inject, Optional, ElementRef, Renderer2 as Renderer } from '@angular/core';
import { Button } from '@progress/kendo-angular-buttons';
import { RTL } from '@progress/kendo-angular-l10n';
import { EditService } from './edit.service';
/**
 * Represents the `add new item` command of the Grid.
 *
 * You can apply this directive to any `button` element inside a
 * [`ToolbarTemplate`]({% slug api_grid_commandcolumncomponent %}).
 *
 * When an associated button with the directive is clicked, the
 * [`add`]({% slug api_grid_gridcomponent %}#toc-add) event
 * is triggered. For more information, refer to the [editing example]({% slug editing_grid %}).
 *
 * @example
 * ```ts-no-run
 * <kendo-grid>
 *    <ng-template kendoGridToolbarTemplate>
 *       <button kendoGridAddCommand>Add new</button>
 *    </ng-template>
 * </kendo-grid>
 * ```
 */
export class AddCommandDirective extends Button {
    constructor(editService, element, renderer, rtl) {
        super(element, renderer, null, rtl);
        this.editService = editService;
    }
    /**
     * @hidden
     */
    click() {
        this.editService.beginAdd();
    }
    /**
     * @hidden
     */
    get buttonClass() {
        return true;
    }
    /**
     * @hidden
     */
    get commandClass() {
        return true;
    }
}
AddCommandDirective.decorators = [
    { type: Directive, args: [{
                selector: '[kendoGridAddCommand]'
            },] },
];
/** @nocollapse */
AddCommandDirective.ctorParameters = () => [
    { type: EditService, },
    { type: ElementRef, },
    { type: Renderer, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] },] },
];
AddCommandDirective.propDecorators = {
    'click': [{ type: HostListener, args: ['click',] },],
    'buttonClass': [{ type: HostBinding, args: ['class.k-button',] },],
    'commandClass': [{ type: HostBinding, args: ['class.k-grid-add-command',] },],
};
