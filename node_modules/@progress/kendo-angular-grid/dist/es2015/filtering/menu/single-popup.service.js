import { PopupService } from '@progress/kendo-angular-popup';
import { Injectable, Renderer2, NgZone, Inject, Optional } from '@angular/core';
import { isPresent } from '../../utils';
import { PreventableEvent } from '../../common/preventable-event';
import { Subject } from 'rxjs/Subject';
import { RTL } from '@progress/kendo-angular-l10n';
const contains = (node, predicate) => {
    while (node) {
        if (predicate(node)) {
            return true;
        }
        node = node.parentNode;
    }
    return false;
};
class CloseEvent extends PreventableEvent {
}
/**
 * @hidden
 */
export class SinglePopupService {
    constructor(popupService, renderer, ngZone, rtl = false) {
        this.popupService = popupService;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.rtl = rtl;
        this.onClose = new Subject();
    }
    open(anchor, template, popupRef) {
        const toggle = isPresent(popupRef) && this.popupRef === popupRef;
        this.destroy();
        if (!toggle) {
            const direction = this.rtl ? 'right' : 'left';
            this.popupRef = this.popupService.open({
                anchorAlign: { vertical: 'bottom', horizontal: direction },
                popupAlign: { vertical: 'top', horizontal: direction },
                anchor: anchor,
                content: template
            });
            this.attachClose(anchor);
        }
        return this.popupRef;
    }
    destroy() {
        if (this.popupRef) {
            this.detachClose();
            this.popupRef.close();
            this.popupRef = null;
        }
    }
    detachClose() {
        if (this.removeClick) {
            this.removeClick();
        }
    }
    attachClose(skipElement) {
        this.detachClose();
        this.ngZone.runOutsideAngular(() => this.removeClick = this.renderer.listen("document", "click", ({ target }) => {
            if (!contains(target, x => this.popupRef.popupElement === x || x === skipElement)) {
                const args = new CloseEvent();
                this.onClose.next(args);
                if (!args.isDefaultPrevented()) {
                    this.destroy();
                }
            }
        }));
    }
}
SinglePopupService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
SinglePopupService.ctorParameters = () => [
    { type: PopupService, },
    { type: Renderer2, },
    { type: NgZone, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [RTL,] },] },
];
