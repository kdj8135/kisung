"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var index_builder_service_1 = require("../index-builder.service");
var last = function (list) { return list[list.length - 1]; };
var safe = function (node) { return (node || {}); };
var safeChildren = function (node) { return (safe(node).children || []); };
var findLast = function (node) {
    var lastNode = node;
    var children = [].concat(safeChildren(node));
    while (children.length) {
        children = children.concat(safeChildren(last(children)));
        lastNode = children.shift();
    }
    return lastNode;
};
var link = function (node) {
    var prev = node.prev, next = node.next;
    if (prev) {
        prev.next = node;
    }
    if (next) {
        next.prev = node;
    }
};
var unlink = function (prev, next) {
    if (prev) {
        prev.next = next;
    }
    if (next) {
        next.prev = prev;
    }
};
/**
 * @hidden
 */
var NavigationModel = /** @class */ (function () {
    function NavigationModel() {
        this.ib = new index_builder_service_1.IndexBuilderService();
        this.nodes = [];
    }
    NavigationModel.prototype.firstNode = function () {
        return this.nodes[0] || null;
    };
    NavigationModel.prototype.lastNode = function () {
        var node = this.nodes[this.nodes.length - 1];
        if (!node) {
            return null;
        }
        return findLast(last(this.container(node))) || node;
    };
    NavigationModel.prototype.closestNode = function (index) {
        var prev = safe(this.findNode(index)).prev;
        var sibling = prev || this.firstNode();
        return safe(sibling).index === index ? this.sibling(sibling, 1) : sibling;
    };
    NavigationModel.prototype.findNode = function (index) {
        return this.find(index, this.nodes);
    };
    NavigationModel.prototype.findParent = function (index) {
        var parentLevel = this.ib.level(index) - 1;
        return this.findNode(this.ib.indexForLevel(index, parentLevel));
    };
    NavigationModel.prototype.findChild = function (index) {
        return safeChildren(this.findNode(index))[0] || null;
    };
    NavigationModel.prototype.registerItem = function (index) {
        var children = [];
        var level = this.ib.level(index);
        var parent = this.findParent(index);
        if (parent || level === 1) {
            var prev = this.prevNode(parent, index);
            var next = this.nextNode(parent, index);
            var node = { children: children, index: index, parent: parent, prev: prev, next: next };
            link(node);
            this.insert(node, parent);
        }
    };
    NavigationModel.prototype.unregisterItem = function (index) {
        var node = this.find(index, this.nodes);
        if (!node) {
            return;
        }
        unlink(node.prev, this.nextNode(node.parent, node.index));
        var children = this.container(node.parent);
        children.splice(children.indexOf(node), 1);
    };
    NavigationModel.prototype.childLevel = function (nodes) {
        if (!nodes || !nodes.length) {
            return 1;
        }
        return this.ib.level(nodes[0].index);
    };
    NavigationModel.prototype.container = function (node) {
        return node ? node.children : this.nodes;
    };
    NavigationModel.prototype.find = function (index, nodes) {
        var childLevel = this.childLevel(nodes);
        var indexToMatch = this.ib.indexForLevel(index, childLevel);
        var isLeaf = childLevel === this.ib.level(index);
        var node = nodes.find(function (n) { return n.index === indexToMatch; });
        if (!node) {
            return null;
        }
        return isLeaf ? node : this.find(index, node.children);
    };
    NavigationModel.prototype.closestIndexPosition = function (nodes, index) {
        var indexPosition = this.ib.lastLevelIndex(index);
        var idx = 0;
        while (idx < nodes.length) {
            if (this.ib.lastLevelIndex(nodes[idx].index) > indexPosition) {
                return idx;
            }
            idx += 1;
        }
        return idx;
    };
    NavigationModel.prototype.insert = function (node, parent) {
        var nodes = this.container(parent);
        nodes.splice(this.closestIndexPosition(nodes, node.index), 0, node);
    };
    NavigationModel.prototype.prevNode = function (parent, index) {
        var nodes = this.container(parent);
        var partialList = nodes.slice(0, this.closestIndexPosition(nodes, index));
        return findLast(last(partialList)) || parent || null;
    };
    NavigationModel.prototype.nextNode = function (parent, index) {
        var children = this.container(parent);
        var currentNode = this.findNode(index);
        if (!parent && currentNode) {
            return this.sibling(currentNode, 1);
        }
        var nodeIndex = this.closestIndexPosition(children, index);
        var child = children.slice(nodeIndex)[0];
        return child ? child : this.sibling(parent, 1);
    };
    NavigationModel.prototype.sibling = function (node, offset) {
        if (!node) {
            return null;
        }
        var parent = this.findParent(node.index);
        var container = this.container(parent);
        return container[container.indexOf(node) + offset] || this.sibling(parent, offset) || null;
    };
    return NavigationModel;
}());
exports.NavigationModel = NavigationModel;
