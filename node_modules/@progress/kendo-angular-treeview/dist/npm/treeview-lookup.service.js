"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var utils_1 = require("./utils");
/**
 * @hidden
 */
var TreeViewLookupService = /** @class */ (function () {
    function TreeViewLookupService() {
        this.map = new Map();
    }
    TreeViewLookupService.prototype.registerItem = function (item, parent) {
        var currentLookup = {
            children: [],
            item: item,
            parent: this.item(utils_1.nodeIndex(parent))
        };
        this.map.set(item.index, currentLookup);
    };
    TreeViewLookupService.prototype.registerChildren = function (index, children) {
        var item = this.item(index);
        if (!item) {
            return;
        }
        item.children = children;
    };
    TreeViewLookupService.prototype.unregisterItem = function (item) {
        this.map.delete(item);
    };
    TreeViewLookupService.prototype.replaceItem = function (index, item, parent) {
        var old = this.item(index);
        if (!old || !item) {
            return;
        }
        this.unregisterItem(index);
        this.registerItem(item, parent);
        if (index === item.index) {
            this.registerChildren(item.index, old.children.slice());
        }
    };
    TreeViewLookupService.prototype.itemLookup = function (index) {
        var item = this.item(index);
        if (!item) {
            return null;
        }
        return {
            children: this.mapChildren(item.children),
            item: item.item,
            parent: item.parent
        };
    };
    TreeViewLookupService.prototype.hasItem = function (index) {
        return this.map.has(index);
    };
    TreeViewLookupService.prototype.item = function (index) {
        return this.map.get(index) || null;
    };
    TreeViewLookupService.prototype.mapChildren = function (children) {
        var _this = this;
        return children.map(function (c) {
            var _a = _this.item(c.index), item = _a.item, parent = _a.parent, children = _a.children;
            return {
                children: _this.mapChildren(children),
                item: item,
                parent: parent
            };
        });
    };
    TreeViewLookupService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    TreeViewLookupService.ctorParameters = function () { return []; };
    return TreeViewLookupService;
}());
exports.TreeViewLookupService = TreeViewLookupService;
