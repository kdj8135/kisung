/* tslint:disable:component-selector-name  component-selector-type */
import { Component, ChangeDetectionStrategy, EventEmitter, ElementRef, HostBinding, Input, Inject, Output, InjectionToken, Renderer2, NgZone } from '@angular/core';
import { RowHeightService } from './services/row-height.service';
import { ScrollerService, PageAction } from './services/scroller.service';
import { isDocumentAvailable } from '../util';
import { animationFrame } from 'rxjs/scheduler/animationFrame';
import { Subject } from 'rxjs/Subject';
import { fromEvent } from 'rxjs/observable/fromEvent';
import { interval } from 'rxjs/observable/interval';
import { empty } from 'rxjs/observable/empty';
import { of } from 'rxjs/observable/of';
import { combineLatest } from 'rxjs/operators/combineLatest';
import { map } from 'rxjs/operators/map';
import { scan } from 'rxjs/operators/scan';
import { takeWhile } from 'rxjs/operators/takeWhile';
/**
 * @hidden
 */
export const SCROLLER_FACTORY_TOKEN = new InjectionToken('dateinputs-scroll-service-factory');
/**
 * @hidden
 */
export function DEFAULT_SCROLLER_FACTORY(observable) {
    return new ScrollerService(observable);
}
/**
 * @hidden
 */
export var ScrollDirection;
(function (ScrollDirection) {
    ScrollDirection[ScrollDirection["Up"] = 0] = "Up";
    ScrollDirection[ScrollDirection["Down"] = 1] = "Down";
})(ScrollDirection || (ScrollDirection = {}));
const FRAME_DURATION = 17;
const scrollModifiers = {
    [ScrollDirection.Down]: (step) => value => value + step,
    [ScrollDirection.Up]: (step) => value => value - step
};
const scrollNormalizers = {
    [ScrollDirection.Down]: (end) => value => Math.min(value, end),
    [ScrollDirection.Up]: (end) => value => Math.max(value, end)
};
const scrollValidators = {
    [ScrollDirection.Down]: end => start => start < end,
    [ScrollDirection.Up]: end => start => start > end
};
const differenceToScroll = (scrollTop, staticOffset, maxScrollDifference) => {
    return Math.min(Math.abs(staticOffset - scrollTop), maxScrollDifference);
};
/**
 * @hidden
 */
export class VirtualizationComponent {
    constructor(scrollerFactory, container, renderer, zone) {
        this.container = container;
        this.renderer = renderer;
        this.zone = zone;
        this.itemHeight = 1;
        this.topOffset = 0;
        this.bottomOffset = 0;
        this.maxScrollDifference = 100;
        this.scrollOffsetHeight = 0;
        this.scrollDuration = 150;
        this.activeIndexChange = new EventEmitter();
        this.pageChange = new EventEmitter();
        this.scrollChange = new EventEmitter();
        this.resolvedPromise = Promise.resolve(null);
        this.dispatcher = new Subject();
        this.scroller = scrollerFactory(this.dispatcher);
    }
    wrapperClasses() {
        return true;
    }
    ngOnChanges(changes) {
        if (changes.take || changes.total) {
            this.initServices();
            this.totalHeight = this.getTotalHeight();
        }
    }
    ngOnInit() {
        if (!this.rowHeightService) {
            this.rowHeightService = this.createRowHeightService();
        }
    }
    ngAfterViewInit() {
        this.zone.runOutsideAngular(() => {
            this.containerScrollSubscription = this.scroll$()
                .pipe(map((event) => event.target))
                .subscribe(t => {
                this.dispatcher.next(t);
                this.emitActiveIndex(t);
            });
        });
    }
    ngOnDestroy() {
        if (this.containerScrollSubscription) {
            this.containerScrollSubscription.unsubscribe();
        }
        if (this.scrollSubscription) {
            this.scrollSubscription.unsubscribe();
        }
        if (this.animationSubscription) {
            this.animationSubscription.unsubscribe();
        }
    }
    activeIndex() {
        return this.itemIndex(this.container.nativeElement.scrollTop);
    }
    itemIndex(offset) {
        return this.rowHeightService.index(offset);
    }
    itemOffset(index) {
        return this.rowHeightService.offset(index);
    }
    isIndexVisible(index) {
        if (!this.rowHeightService) {
            return false;
        }
        const currentScrollTop = this.container.nativeElement.scrollTop;
        const top = this.rowHeightService.offset(index);
        const bottom = top + this.rowHeightService.height(index);
        return currentScrollTop >= top && currentScrollTop <= bottom;
    }
    isListScrolled(index) {
        return this.container.nativeElement.scrollTop !== this.rowHeightService.offset(index);
    }
    scrollTo(value) {
        this.renderer.setProperty(this.container.nativeElement, 'scrollTop', value);
    }
    scrollToIndex(index) {
        //XXX: scrolling with tick is required to prevent list jump in Chrome.
        //Original issue: focus first day in the month and press LEFT arrow.
        //Notice how the view jumps on every day change.
        //
        this.resolvedPromise.then(() => {
            this.scrollTo(this.rowHeightService.offset(index));
        });
    }
    scrollToBottom() {
        this.scrollTo(this.totalHeight);
    }
    animateToIndex(index) {
        if (this.animationSubscription) {
            this.animationSubscription.unsubscribe();
        }
        const indexOffset = this.rowHeightService.offset(index);
        const direction = this.getScrollDirection(indexOffset);
        const { start, end } = this.scrollRange(indexOffset, direction);
        if (start === end) {
            return;
        }
        const step = this.scrollStep(start, end);
        const modifyScroll = scrollModifiers[direction](step);
        const normalizeScroll = scrollNormalizers[direction](end);
        const isScrollValid = scrollValidators[direction](modifyScroll(end));
        this.zone.runOutsideAngular(() => {
            this.animationSubscription = of(start)
                .pipe(combineLatest(interval(0, animationFrame)), map(stream => stream[0]), scan(modifyScroll), takeWhile(isScrollValid), map(normalizeScroll))
                .subscribe((x) => this.scrollTo(x));
        });
    }
    scrollRange(indexOffset, direction) {
        const containerScrollTop = this.container.nativeElement.scrollTop;
        if (parseInt(indexOffset, 10) === parseInt(containerScrollTop, 10)) {
            return { start: indexOffset, end: indexOffset };
        }
        const max = this.containerMaxScroll();
        const sign = direction === ScrollDirection.Up ? 1 : -1;
        const difference = differenceToScroll(containerScrollTop, indexOffset, this.maxScrollDifference);
        const end = Math.min(indexOffset, max);
        const start = Math.min(Math.max(end + (sign * difference), 0), max);
        return { start, end };
    }
    scrollStep(start, end) {
        return Math.abs(end - start) / (this.scrollDuration / FRAME_DURATION);
    }
    scroll$() {
        return isDocumentAvailable() ? fromEvent(this.container.nativeElement, 'scroll') : empty();
    }
    initServices() {
        this.rowHeightService = this.createRowHeightService();
        if (this.scrollSubscription) {
            this.scrollSubscription.unsubscribe();
        }
        this.scrollSubscription = this.scroller
            .create(this.rowHeightService, this.skip, this.take, this.total, this.topOffset, this.scrollOffsetHeight)
            .subscribe((x) => this.zone.run(() => {
            if (x instanceof PageAction) {
                this.pageChange.emit(x);
            }
            else {
                this.scrollChange.emit(x);
            }
        }));
    }
    createRowHeightService() {
        return new RowHeightService(this.total, this.itemHeight, 0);
    }
    getTotalHeight() {
        return this.rowHeightService.totalHeight() + this.bottomOffset;
    }
    emitActiveIndex({ scrollTop }) {
        const index = this.rowHeightService.index(scrollTop - this.topOffset);
        if (this.lastActiveIndex !== index) {
            this.lastActiveIndex = index;
            this.activeIndexChange.emit(index);
        }
    }
    getScrollDirection(indexOffset) {
        return indexOffset < this.container.nativeElement.scrollTop ? ScrollDirection.Up : ScrollDirection.Down;
    }
    containerMaxScroll() {
        const containerElement = this.container.nativeElement;
        return containerElement.scrollHeight - containerElement.offsetHeight;
    }
}
VirtualizationComponent.decorators = [
    { type: Component, args: [{
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [{
                        provide: SCROLLER_FACTORY_TOKEN,
                        useValue: DEFAULT_SCROLLER_FACTORY
                    }],
                selector: 'kendo-virtualization',
                template: `
    <ng-content></ng-content>
    <div
        class="k-scrollable-placeholder"
        [style.height.px]="totalHeight"
    ></div>
  `
            },] },
];
/** @nocollapse */
VirtualizationComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [SCROLLER_FACTORY_TOKEN,] },] },
    { type: ElementRef, },
    { type: Renderer2, },
    { type: NgZone, },
];
VirtualizationComponent.propDecorators = {
    'itemHeight': [{ type: Input },],
    'topOffset': [{ type: Input },],
    'bottomOffset': [{ type: Input },],
    'maxScrollDifference': [{ type: Input },],
    'scrollOffsetHeight': [{ type: Input },],
    'scrollDuration': [{ type: Input },],
    'skip': [{ type: Input },],
    'take': [{ type: Input },],
    'total': [{ type: Input },],
    'activeIndexChange': [{ type: Output },],
    'pageChange': [{ type: Output },],
    'scrollChange': [{ type: Output },],
    'wrapperClasses': [{ type: HostBinding, args: ['class.k-content',] }, { type: HostBinding, args: ['class.k-scrollable',] },],
};
