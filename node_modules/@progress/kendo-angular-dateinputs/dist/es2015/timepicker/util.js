import { cloneDate } from '@progress/kendo-date-math';
import { TIME_PART } from './models/time-part.default';
const defaultGetters = [
    { type: TIME_PART.hour, getter: (value) => value.getHours() },
    { type: TIME_PART.minute, getter: (value) => value.getMinutes() },
    { type: TIME_PART.second, getter: (value) => value.getSeconds() },
    { type: TIME_PART.millisecond, getter: (value) => value.getMilliseconds() }
];
const left = getter => (origin, _) => getter(origin);
const right = getter => (_, candidate) => getter(candidate);
const convertToObject = (parts) => parts.reduce((obj, p) => { obj[p.type] = p.type; return obj; }, {});
const getterByPart = parts => g => parts[g.type] ? right(g.getter) : left(g.getter);
const gettersFactory = getters => parts => (getters.map(getterByPart(convertToObject(parts))));
const snapValue = (getter, step) => (date) => {
    const value = getter(date);
    return value - (value % step);
};
const snappersFactory = getters => steps => (getters.map(g => {
    const step = steps[g.type];
    return step ? snapValue(g.getter, step) : g.getter;
}));
/**
 * @hidden
 */
export const generateGetters = gettersFactory(defaultGetters);
/**
 * @hidden
 */
export const generateSnappers = snappersFactory(defaultGetters);
/**
 * @hidden
 */
export const valueMerger = getters => (origin, candidate) => {
    origin.setHours(...getters.map(g => g(origin, candidate)));
    return origin;
};
/**
 * @hidden
 */
export const snapTime = snappers => candidate => {
    const date = cloneDate(candidate);
    date.setHours(...snappers.map(s => s(date)));
    return date;
};
