"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var view_enum_1 = require("../models/view.enum");
var util_1 = require("../../util");
var div = util_1.domContainerFactory('div');
var ul = util_1.domContainerFactory('ul');
var li = util_1.domContainerFactory('li');
var td = util_1.domContainerFactory('td');
var th = util_1.domContainerFactory('th');
var tr = util_1.domContainerFactory('tr');
var tbody = util_1.domContainerFactory('tbody');
var thead = util_1.domContainerFactory('thead');
var table = util_1.domContainerFactory('table');
var monthHeader = function () { return (div("\n            <span class=\"k-calendar-title\">March 2017</span>\n            <span class=\"k-calendar-today\">TODAY</span>\n        ", 'k-calendar-header')); };
var monthWeekHeader = function () { return (table([
    thead([
        tr([th('MO')])
    ])
], 'k-calendar-weekdays')); };
var content = function (rows) { return (table([
    tbody([
        tr([th('1')])
    ].concat((new Array(rows).fill('1').map(function (v) { return tr([td("<span class=\"k-link\">" + v + "</span>")]); }))))
])); };
var scrollable = function (children) { return div(children, 'k-content k-scrollable'); };
var view = function (contentElement, className, renderWeekHeader) { return (div([
    monthHeader(),
    renderWeekHeader ? monthWeekHeader() : null,
    scrollable([contentElement, contentElement])
], className, { left: '-10000px', position: 'absolute' })); };
var navigationList = (function () {
    var navElement;
    return function () {
        if (!util_1.isDocumentAvailable) {
            return null;
        }
        if (!navElement) {
            navElement = div([scrollable([ul([li('<span>FEB</span>')])])], 'k-calendar-navigation', { left: '-10000px', position: 'absolute' });
        }
        return navElement;
    };
})();
var viewFactory = function (rows, className, renderWeekHeader) {
    var viewElement;
    return function () {
        if (!util_1.isDocumentAvailable) {
            return null;
        }
        if (!viewElement) {
            viewElement = view(content(rows), className, renderWeekHeader);
        }
        return viewElement;
    };
};
var monthView = viewFactory(6, 'k-calendar-view k-calendar-monthview', true);
var yearView = viewFactory(3, 'k-calendar-view k-calendar-yearview', false);
var decadeView = viewFactory(2, 'k-calendar-view k-calendar-decadeview', false);
var height = function (element) { return (parseFloat(window.getComputedStyle(element).height) || element.offsetHeight); };
var getScrollable = function (element) { return element.querySelector('.k-scrollable'); };
var getBody = function (element) { return element.querySelector('tbody'); };
/**
 * @hidden
 */
var DOMService = /** @class */ (function () {
    function DOMService() {
    }
    DOMService.prototype.ensureHeights = function () {
        if (this.calendarHeight !== undefined) {
            return;
        }
        this.calculateHeights();
    };
    DOMService.prototype.calculateHeights = function (container) {
        var _this = this;
        if (!util_1.isDocumentAvailable()) {
            return;
        }
        this.hostContainer = container;
        this.batch(monthView(), function (contentElement) {
            var viewElement = getBody(contentElement);
            _this.calendarHeight = height(contentElement);
            _this.monthViewHeight = height(viewElement);
            _this.headerHeight = height(viewElement.children[0]);
            _this.scrollableContentHeight = height(getScrollable(contentElement));
        });
        this.batch(yearView(), function (contentElement) {
            _this.yearViewHeight = height(getBody(contentElement));
            _this.scrollableYearContentHeight = height(getScrollable(contentElement));
        });
        this.batch(decadeView(), function (contentElement) {
            _this.decadeViewHeight = height(getBody(contentElement));
            _this.centuryViewHeight = _this.decadeViewHeight;
        });
        this.batch(navigationList(), function (contentElement) {
            _this.navigationItemHeight = height(contentElement.querySelector('li'));
        });
    };
    DOMService.prototype.viewHeight = function (viewType) {
        switch (viewType) {
            case view_enum_1.CalendarViewEnum.month:
                return this.monthViewHeight;
            case view_enum_1.CalendarViewEnum.year:
                return this.yearViewHeight;
            case view_enum_1.CalendarViewEnum.decade:
                return this.decadeViewHeight;
            case view_enum_1.CalendarViewEnum.century:
                return this.centuryViewHeight;
            default:
                return 1;
        }
    };
    DOMService.prototype.batch = function (contentElement, action) {
        var hostContainer = this.hostContainer || document.body;
        var appendedContent = hostContainer.appendChild(contentElement);
        action(appendedContent);
        hostContainer.removeChild(appendedContent);
    };
    DOMService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    DOMService.ctorParameters = function () { return []; };
    return DOMService;
}());
exports.DOMService = DOMService;
