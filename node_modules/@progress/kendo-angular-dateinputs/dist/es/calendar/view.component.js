/* tslint:disable:component-selector-name  component-selector */
import { Component, ChangeDetectionStrategy, EventEmitter, Input, Output } from '@angular/core';
import { CalendarViewEnum } from './models/view.enum';
import { BusViewService } from './services/bus-view.service';
import { IntlService } from '@progress/kendo-angular-intl';
import { cloneDate, isEqual, weekInYear } from '@progress/kendo-date-math';
import { getToday, setTime, stringifyClassObject } from '../util';
/**
 * @hidden
 */
var ViewComponent = /** @class */ (function () {
    function ViewComponent(bus, intl) {
        this.bus = bus;
        this.intl = intl;
        this.isActive = true;
        this.change = new EventEmitter();
        this.colSpan = 0;
        this.today = getToday();
    }
    Object.defineProperty(ViewComponent.prototype, "weekNumber", {
        get: function () {
            return this.showWeekNumbers && this.activeView === CalendarViewEnum.month;
        },
        set: function (showWeekNumbers) {
            this.showWeekNumbers = showWeekNumbers;
        },
        enumerable: true,
        configurable: true
    });
    ViewComponent.prototype.ngOnChanges = function (_) {
        this.service = this.bus.service(this.activeView);
        if (!this.service) {
            return;
        }
        this.colSpan = this.service.rowLength(this.weekNumber);
        this.title = this.service.title(this.viewDate);
        var time = this.selectedDate || this.today;
        var viewDate = setTime(this.viewDate, time);
        this.data = this.service.data({
            cellUID: this.cellUID,
            focusedDate: this.focusedDate,
            isActiveView: !this.bus.canMoveDown(this.activeView),
            max: this.max,
            min: this.min,
            selectedDate: this.selectedDate,
            viewDate: viewDate
        });
    };
    ViewComponent.prototype.handleClick = function (ctx) {
        this.change.emit(ctx.value);
    };
    ViewComponent.prototype.firstDate = function (rowCtx) {
        var ctx = this.firstWeekDateContext(rowCtx);
        return ctx ? ctx.value : null;
    };
    ViewComponent.prototype.getWeekNumber = function (date) {
        if (!this.weekNumber) {
            return null;
        }
        return weekInYear(date, this.intl.firstDay());
    };
    ViewComponent.prototype.getWeekNumberContext = function (rowCtx) {
        var ctx = this.firstWeekDateContext(rowCtx);
        if (!this.weekNumber || !ctx) {
            return null;
        }
        var weekNumber = weekInYear(ctx.value, this.intl.firstDay()).toString();
        return {
            formattedValue: weekNumber,
            id: null,
            isFocused: false,
            isSelected: false,
            isWeekend: false,
            title: weekNumber,
            value: cloneDate(ctx.value)
        };
    };
    ViewComponent.prototype.getStyles = function (context) {
        return stringifyClassObject({
            'k-state-focused': this.isActive && context.isFocused,
            'k-state-selected': context.isSelected,
            'k-today': isEqual(context.value, this.today),
            'k-weekend': context.isWeekend
        });
    };
    ViewComponent.prototype.firstWeekDateContext = function (rowCtx) {
        if (!this.weekNumber) {
            return null;
        }
        var idx = 0;
        var ctx = rowCtx[idx];
        while (!ctx && idx < rowCtx.length) {
            ctx = rowCtx[++idx];
        }
        return ctx;
    };
    ViewComponent.decorators = [
        { type: Component, args: [{
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    selector: '[kendoCalendarView]',
                    template: "\n    <ng-template #emptyCell><td>&nbsp;</td></ng-template>\n    <tr role=\"row\"><th scope=\"col\" [colSpan]=\"colSpan\">{{title}}</th></tr>\n    <tr *kFor=\"let row of data\" role=\"row\">\n        <ng-template [ngIf]=\"weekNumber\">\n            <td class=\"k-alt\" *ngIf=\"firstDate(row); else emptyCell\">\n                <ng-template [ngIf]=\"!weekNumberTemplateRef\">\n                    {{getWeekNumber(firstDate(row))}}\n                </ng-template>\n                <ng-template\n                    [ngIf]=\"weekNumberTemplateRef\"\n                    [ngTemplateOutlet]=\"weekNumberTemplateRef\"\n                    [ngTemplateOutletContext]=\"{\n                        $implicit: firstDate(row),\n                        cellContext: getWeekNumberContext(row)\n                    }\"\n                ></ng-template>\n            </td>\n        </ng-template>\n        <ng-template kFor [kForOf]=\"row\" let-cell>\n            <td *ngIf=\"cell; else emptyCell\"\n                role=\"gridcell\" [attr.id]=\"cell.id\" [attr.aria-selected]=\"cell.isSelected\"\n                [ngClass]=\"getStyles(cell)\" [title]=\"cell.title\" (click)=\"handleClick(cell)\"\n            >\n                <span class=\"k-link\">\n                    <ng-template [ngIf]=\"!templateRef\">{{cell.formattedValue}}</ng-template>\n                    <ng-template\n                        [ngIf]=\"templateRef\"\n                        [ngTemplateOutlet]=\"templateRef\"\n                        [ngTemplateOutletContext]=\"{ $implicit: cell.value, cellContext: cell }\"\n                    ></ng-template>\n                </span>\n            </td>\n        </ng-template>\n    </tr>\n  "
                },] },
    ];
    /** @nocollapse */
    ViewComponent.ctorParameters = function () { return [
        { type: BusViewService, },
        { type: IntlService, },
    ]; };
    ViewComponent.propDecorators = {
        'isActive': [{ type: Input },],
        'activeView': [{ type: Input },],
        'cellUID': [{ type: Input },],
        'focusedDate': [{ type: Input },],
        'selectedDate': [{ type: Input },],
        'viewDate': [{ type: Input },],
        'min': [{ type: Input },],
        'max': [{ type: Input },],
        'weekNumber': [{ type: Input },],
        'viewIndex': [{ type: Input },],
        'templateRef': [{ type: Input },],
        'weekNumberTemplateRef': [{ type: Input },],
        'change': [{ type: Output },],
    };
    return ViewComponent;
}());
export { ViewComponent };
