/**
 * The returned type of the `dragAdd` and `dragEnd` events.
 */
export interface DragDropEvent {
    /**
     * The original index of the item.
     */
    index: number;
}
/**
 * The returned type of the `dragOver` event.
 */
export interface DragOverEvent {
    /**
     * The original index of the item.
     */
    oldIndex: number;
    /**
     * The new index of the item.
     */
    newIndex: number;
}
/**
 * Defines an event whose default action can be prevented
 * by calling the `preventDefault` method.
 *
 * @hidden
 */
export declare abstract class PreventableEvent {
    private prevented;
    /**
     * Prevents the default action for a specified event.
     * In this way, the source component suppresses
     * the built-in behavior that follows the event.
     */
    preventDefault(): void;
    /**
     * If the event was prevented
     * by any of its subscribers, returns `true`.
     *
     * @returns `true` if the default action was prevented. Otherwise, returns `false`.
     */
    isDefaultPrevented(): boolean;
}
/**
 * The arguments for the `data`, `add`, or `remove` events.
 */
export declare class DataEvent extends PreventableEvent {
    index: number;
    dataItem: Object;
    /**
     * Constructs the event arguments for the `data`, `add`, or `remove` events.
     * @param index - The index of the data item.
     * @param dataItem - The data item that will be added or removed.
     */
    constructor(index: number, dataItem: Object);
}
