import { SortableComponent } from './sortable.component';
/**
 * The service that provides the drag-and-drop functionality for
 * transferring items between Sortable components within the same page.
 *
 * @hidden
 */
export declare class SortableService {
    private source;
    private previous;
    private sortableCounter;
    private sortableRegister;
    /**
     * Registers a `SortableComponent` with which the service operates.
     *
     * @param sortableComponent - The `SortableComponent`.
     * @return - The unique key that the current `SortableComponent` gets when registered.
     */
    registerComponent(sortableComponent: SortableComponent): string;
    /**
     * Removes a `SortableComponent` from the registered `SortableComponents` with which the service operates.
     *
     * @param key - The key of the `SortableComponent` which will be removed from the register.
     * Obtained when `registerComponent` is called.
     */
    unregisterComponent(key: string): void;
    /**
     * Sets the `SortableComponent` as a source component. When dragging an item from one Sortable to another,
     * the source component is the one from which the item originates.
     *
     * @param sortable - The `SortableComponent`.
     */
    setSource(sortable: SortableComponent): void;
    /**
     * Returns the source `SortableComponent` from which
     * an item is dragged to other Sortable components.
     *
     * @return - The `SourceComponent`.
     */
    getSource(): SortableComponent;
    /**
     * Called by the `SortableComponents` when an item is dragged from one Sortable to another.
     *
     * @param target - The target `SortableComponent`.
     * @param index - The index of the item that is dragged.
     */
    initMove(target: SortableComponent, index: number): void;
    /**
     * Called by the `SortableComponent` when the dragging of an item is completed.
     *
     * @param target - The target Sortable component where the item is dropped.
     */
    finishMove(): void;
    /**
     * The method that finds the `SortableComponent` which is registered to
     * the `SortableService` by using the arguments of the `touch` event.
     *
     * @param touch - A Touch-Object of the `Touch` type interface.
     * Represents a single contact point (finger or stylus)
     * on a touch-sensitive device (touchscreen or trackpad).
     *
     * @return { component: SortableComponent, index: number } - An object
     * where the component is the `SortableComponent` that owns the item
     * and the index is the index of the touched item.
     */
    getSortableComponentFromTouch(touch: Touch): {
        component: SortableComponent;
        index: number;
    };
}
