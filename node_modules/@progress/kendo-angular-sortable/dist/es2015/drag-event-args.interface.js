/**
 * Defines an event whose default action can be prevented
 * by calling the `preventDefault` method.
 *
 * @hidden
 */
export class PreventableEvent {
    constructor() {
        this.prevented = false;
    }
    /**
     * Prevents the default action for a specified event.
     * In this way, the source component suppresses
     * the built-in behavior that follows the event.
     */
    preventDefault() {
        this.prevented = true;
    }
    /**
     * If the event was prevented
     * by any of its subscribers, returns `true`.
     *
     * @returns `true` if the default action was prevented. Otherwise, returns `false`.
     */
    isDefaultPrevented() {
        return this.prevented;
    }
}
/**
 * The arguments for the `data`, `add`, or `remove` events.
 */
export class DataEvent extends PreventableEvent {
    /**
     * Constructs the event arguments for the `data`, `add`, or `remove` events.
     * @param index - The index of the data item.
     * @param dataItem - The data item that will be added or removed.
     */
    constructor(index, dataItem) {
        super();
        this.index = index;
        this.dataItem = dataItem;
    }
}
