import { QueryList, TemplateRef, EventEmitter, OnInit, OnDestroy, AfterViewChecked } from '@angular/core';
import { DragDropEvent, DataEvent, DragOverEvent } from './drag-event-args.interface';
import { SortableService } from './sortable.service';
/**
 * Represents the Kendo UI Sortable component for Angular.
 *
 * {% embed_file sortable-api/app.component.ts %}
 * {% embed_file shared/app.module.ts preview %}
 * {% embed_file shared/main.ts hidden %}
 */
export declare class SortableComponent implements OnInit, OnDestroy, AfterViewChecked {
    /**
     * Specifies the tab index of the Sortable component.
     */
    tabIndex: number;
    /**
     * Sets an array of any data that is used as a data source for the Sortable.
     *
     * {% embed_file sortable-palettes/app.component.ts %}
     * {% embed_file shared/app.module.ts %}
     * {% embed_file shared/main.ts hidden %}
     */
    data: any[];
    /**
     * Enables or disables the [keyboard navigation]({% slug keyboard_navigation_sortable %}).
     * The default value is `false`.
     */
    navigatable: boolean;
    /**
     * Enables or disables the built-in animations.
     * The default value is `false`.
     */
    animation: boolean;
    /**
     * Sets an array of integers, which represent the indexes of the disabled items from the data array.
     * For more information, refer to the section on
     * [disabled items]({% slug overview_sortable %}#toc-disabled-items).
     */
    disabledIndexes: number[];
    /**
     * Sets a string that represents the name of the zone to which the Sortable belongs.
     * Items can be transferred between Sortables which belong to the same zone.
     * For more information, refer to the section on
     * [transferring items]({% slug overview_sortable %}#toc-transfer-of-items).
     */
    zone: string;
    /**
     * Defines the zones from which items can be transferred onto the current Sortable component.
     * If the `acceptZones` property of the target Sortable is set, allows you to transfer items between Sortables
     * which belong to different zones.
     * For more information, refer to the section on the
     * [transfer of items]({% slug overview_sortable %}#toc-transfer-of-items).
     */
    acceptZones: string[];
    /**
     * Represents the CSS styles which are applied to each Sortable item.
     *
     * @example
     * ```ts
     * import { Component } from '@angular/core';
     * import { SortableModule } from '@progress/kendo-angular-sortable';
     *
     * _@Component({
     *  selector: 'my-app',
     *  template: `
     *   <kendo-sortable
     *      [data]="['1','2','3','4','5','6','7']"
     *      [itemStyle] ="{
     *          'display': 'inline-block',
     *          'background-color': '#51A0ED',
     *          'height':'50px',
     *          'width':'50px',
     *          'margin':'3px',
     *          'cursor':'move'
     *          }"
     *      >
     *   </kendo-sortable>
     *    `
     * })
     * export class AppComponent {
     * }
     * ```
     */
    itemStyle: {
        [key: string]: string;
    };
    /**
     * Defines the CSS styles applied to an empty item.
     */
    emptyItemStyle: {
        [key: string]: string;
    };
    /**
     * Defines the CSS styles which are applied to the currently dragged item.
     */
    activeItemStyle: {
        [key: string]: string;
    };
    /**
     * Defines the CSS styles which are applied to all disabled items.
     */
    disabledItemStyle: {
        [key: string]: string;
    };
    /**
     * Defines the class which is applied to each Sortable item.
     */
    itemClass: string | string[] | Set<string>;
    /**
     * Defines the class which is applied to the active Sortable item.
     */
    activeItemClass: string | string[] | Set<string>;
    /**
     * Defines the class which is applied to the empty item when the Sortable has empty data.
     */
    emptyItemClass: string | string[] | Set<string>;
    /**
     * Defines the class which is applied to each disabled Sortable item.
     */
    disabledItemClass: string | string[] | Set<string>;
    /**
     * Sets the text message that will be displayed when the Sortable has no items.
     *
     * @example
     * ```ts
     * import { Component } from '@angular/core';
     * import { SortableModule } from '@progress/kendo-angular-sortable';
     *
     * _@Component({
     *  selector: 'my-app',
     *  template: `
     *    <kendo-sortable [data]="[]"
     *      [emptyText]="'No items - custom message and styles'"
     *      [emptyItemStyle] = "{'height': '40px', 'width':'400px', 'border': '2px dashed black'}" >
     *    </kendo-sortable>
     *    `
     * })
     * export class AppComponent { }
     * ```
     */
    emptyText: string;
    /**
     * Defines the template that will be used for rendering the items.
     */
    itemTemplateRef: TemplateRef<any>;
    itemWrappers: QueryList<any>;
    /**
     * Fires when the dragging of an item is started.
     */
    dragStart: EventEmitter<DragDropEvent>;
    /**
     * Fires when the dragging of an item is completed.
     */
    dragEnd: EventEmitter<DragDropEvent>;
    /**
     * Fires while the dragging of an item is in progress.
     */
    dragOver: EventEmitter<DragOverEvent>;
    /**
     * Fires when a new item is added to the Sortable.
     */
    dataAdd: EventEmitter<DataEvent>;
    /**
     * Fires when an item is removed from the Sortable.
     */
    dataRemove: EventEmitter<DataEvent>;
    /**
     * The index of the currently focused item.
     * If no item is focused, set to `-1`.
     */
    activeIndex: number;
    /**
     * The index of the currently dragged item.
     */
    dragIndex: number;
    /**
     * The location of the hint indicator when dragging on mobile devices.
     */
    hintLocation: {
        x: number;
        y: number;
    };
    id: string;
    private afterKeyPress;
    private transferService;
    private _hideActiveItem;
    private direction;
    private animating;
    constructor(sortableService: SortableService, rtl: boolean);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewChecked(): void;
    /**
     * @hidden
     */
    currentItemStyle(index: number): {
        [key: string]: string;
    };
    /**
     * @hidden
     */
    currentItemClass(index: number): string | string[] | Set<string>;
    /**
     * @hidden
     */
    hintStyle(): {
        [key: string]: string;
    };
    /**
     * @hidden
     */
    itemEnabled(index: number): boolean;
    /**
     * @hidden
     */
    acceptDragFrom(sortableComponent: SortableComponent): boolean;
    /**
     * @hidden
     */
    ariaDropEffect(index: number): string;
    /**
     * @hidden
     */
    dragStartHandler(event: DragEvent, index: number): void;
    /**
     * @hidden
     */
    focusHandler(index: number): void;
    /**
     * @hidden
     */
    blurHandler(): void;
    /**
     * @hidden
     */
    keydownHandler(event: any): void;
    /**
     * @hidden
     */
    touchStart(event: TouchEvent | DragEvent, index: number): void;
    /**
     * @hidden
     */
    dragStartPrevent(event: DragEvent): void;
    /**
     * @hidden
     */
    touchStartPrevent(event: TouchEvent | DragEvent): void;
    /**
     * @hidden
     */
    dragOverHandler(event: DragEvent, index: number): void;
    /**
     * @hidden
     */
    touchMove(event: TouchEvent): void;
    readonly dir: string;
    /**
     * Removes the currently active item from the Data collection that the Sortable uses.
     */
    removeActiveItem(): void;
    /**
     * If the currently dragged item is hidden, returns `true`.
     * If the currently dragged item is visible, returns `false`.
     */
    /**
     * Sets a Boolean value that indicates whether the currently dragged item will be hidden.
     */
    hideActiveItem: boolean;
    /**
     * Clears the active item.
     * An active item is the item which becomes focused when the user navigates with the keyboard.
     */
    clearActiveItem(): void;
    /**
     * Returns the currently active item when the user navigates with the keyboard.
     * @return - The data item which is currently active.
     */
    getActiveItem(): any;
    /**
     * Adds a new data item to a particular index.
     * @param dataItem - The data item.
     * @param index - The index at which the data item is inserted.
     */
    addDataItem(dataItem: any, index: number): void;
    /**
     * @hidden
     */
    moveCurrentItemTo(index: number): void;
    /**
     * @hidden
     */
    animate(wrappers: any[]): void;
    /**
     * @hidden
     */
    reflow(element: any): void;
    /**
     * @hidden
     */
    applyAnimationStyle(el: any, prop: any, val: string): void;
    /**
     * @hidden
     */
    dragFinishHandler(event: DragEvent): void;
    /**
     * @hidden
     */
    touchFinish(event: TouchEvent): void;
    private handleMove(event, index);
    private handleDrop();
    private fixFocus();
}
