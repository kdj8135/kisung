import { add, subtract, remainder, fractionLength, toFixedPrecision } from '../common/math';
function elementOffset(element) {
    var box = element.getBoundingClientRect();
    var documentElement = document.documentElement;
    return {
        top: box.top + (window.pageYOffset || documentElement.scrollTop) - (documentElement.clientTop || 0),
        left: box.left + (window.pageXOffset || documentElement.scrollLeft) - (documentElement.clientLeft || 0)
    };
}
function limitValue(value, min, max) {
    return Math.max(Math.min(value, max), min);
}
/**
 * @hidden
 */
export function decreaseValueToStep(value, _a) {
    var max = _a.max, min = _a.min, smallStep = _a.smallStep;
    var stepValue = subtract(value, min);
    var result;
    var stepRemainder = remainder(stepValue, smallStep);
    if (stepRemainder === 0) {
        result = subtract(stepValue, smallStep);
    }
    else {
        result = subtract(stepValue, stepRemainder);
    }
    return limitValue(add(result, min), min, max);
}
/**
 * @hidden
 */
export function increaseValueToStep(value, _a) {
    var max = _a.max, min = _a.min, smallStep = _a.smallStep;
    var stepValue = subtract(value, min);
    var stepRemainder = remainder(stepValue, smallStep);
    var result = add(subtract(stepValue, stepRemainder), smallStep);
    return limitValue(add(result, min), min, max);
}
/**
 * @hidden
 */
export function snapValue(value, options) {
    var smallStep = options.smallStep, min = options.min;
    var left = decreaseValueToStep(value, options);
    var right = increaseValueToStep(value, options);
    if ((value - min) % smallStep === 0) {
        return value;
    }
    if (right - value <= (right - left) / 2) {
        return right;
    }
    return left;
}
/**
 * @hidden
 */
export function eventValue(eventArgs, scaleElement, options) {
    var min = options.min, max = options.max, vertical = options.vertical, rtl = options.rtl;
    var trackOffset = elementOffset(scaleElement);
    var offset = vertical ? eventArgs.pageY - trackOffset.top : eventArgs.pageX - trackOffset.left;
    var scale = (max - min) / (vertical ? scaleElement.clientHeight : scaleElement.clientWidth);
    var offsetValue = offset * scale;
    var value = rtl || vertical ? max - offsetValue : min + offsetValue;
    var stepFractionLength = fractionLength(options.smallStep);
    value = toFixedPrecision(value, stepFractionLength + 1);
    return snapValue(value, options);
}
/**
 * @hidden
 */
export function isButton(element) {
    return element.className.indexOf('k-button-increase') >= 0 || element.className.indexOf('k-button-decrease') >= 0;
}
/**
 * @hidden
 */
export function isDocumentAvailable() {
    return typeof document !== 'undefined';
}
