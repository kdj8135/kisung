import { AfterViewInit, ElementRef, Renderer2, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * Represents the Kendo UI Switch component for Angular.
 */
export declare class SwitchComponent implements ControlValueAccessor, AfterViewInit {
    private rtl;
    private renderer;
    private hostElement;
    private localizationService;
    /**
     * @hidden
     */
    id: string;
    /**
     * Changes the **On** label so it can be localized.
     */
    onLabel: string;
    /**
     * Changes the **Off** label so it can be localized.
     */
    offLabel: string;
    /**
     * Sets the current value of the Switch when initially displayed.
     */
    checked: boolean;
    /**
     * Disables the Switch when set to `true`.
     */
    disabled: boolean;
    /**
     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    tabindex: number;
    /**
     * @hidden
     */
    tabIndex: number;
    /**
     * Fires each time the user focuses the input element.
     */
    onFocus: EventEmitter<any>;
    /**
     * Fires each time the input element gets blurred.
     */
    onBlur: EventEmitter<any>;
    /**
     * Fires each time the user selects a new value.
     */
    valueChange: EventEmitter<any>;
    dragHandle: any;
    wrapper: any;
    direction: string;
    readonly ariaDisabled: boolean;
    readonly ariaChecked: boolean;
    readonly hostClasses: boolean;
    readonly switchOnClass: boolean;
    readonly switchOffClass: boolean;
    readonly disabledClass: boolean;
    readonly focusedClass: boolean;
    /**
     * @hidden
     */
    readonly onLabelMessage: string;
    /**
     * @hidden
     */
    readonly offLabelMessage: string;
    /**
     * @hidden
     */
    focused: boolean;
    private controller;
    protected ngChange: Function;
    protected ngTouched: Function;
    constructor(rtl: boolean, renderer: Renderer2, hostElement: ElementRef, localizationService: LocalizationService);
    ngOnInit(): void;
    /**
     * Focuses the Switch component.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="switch.focus()">Focus</button>
     *  <kendo-switch #switch></kendo-switch>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    focus(): void;
    /**
     * Blurs the Switch component.
     */
    blur(): void;
    /**
     * @hidden
     *
     * Called when the status of the component changes to or from `disabled`.
     * Depending on the value, it enables or disables the appropriate DOM element.
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * @hidden
     */
    keyDown(event: any): void;
    /**
     * @hidden
     */
    onResize(): void;
    /**
     * @hidden
     */
    handleFocus(): void;
    /**
     * @hidden
     */
    handleBlur(): void;
    /**
     * @hidden
     */
    ngAfterViewInit(): void;
    /**
     * @hidden
     */
    onHandleDrag(event: Event): void;
    /**
     * @hidden
     */
    onHandlePress(event: Event): void;
    /**
     * @hidden
     */
    onHandleRelease(event: Event): void;
    /**
     * @hidden
     */
    writeValue(value: boolean): void;
    /**
     * @hidden
     */
    registerOnChange(fn: () => any): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: () => any): void;
    /**
     * @hidden
     */
    changeValue: Function;
    protected isDocumentAvailable(): boolean;
    protected updateState(): void;
    private keyDownHandler;
    private ifEnabled;
    private applyStyle;
    private updateView;
}
